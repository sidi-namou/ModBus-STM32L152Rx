
TP_TINF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001148  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001284  08001284  00011284  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080012a8  080012a8  000112a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080012ac  080012ac  000112ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  080012b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000060  2000000c  080012bc  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  2000006c  080012bc  0002006c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00006e7a  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000018c5  00000000  00000000  00026eaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000295e  00000000  00000000  00028774  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000005a0  00000000  00000000  0002b0d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000006a8  00000000  00000000  0002b678  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003190  00000000  00000000  0002bd20  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001f69  00000000  00000000  0002eeb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00030e19  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000db4  00000000  00000000  00030e98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000000c 	.word	0x2000000c
 8000158:	00000000 	.word	0x00000000
 800015c:	0800126c 	.word	0x0800126c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000010 	.word	0x20000010
 8000178:	0800126c 	.word	0x0800126c

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800018c:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 800018e:	4b0f      	ldr	r3, [pc, #60]	; (80001cc <HAL_InitTick+0x40>)
{
 8000190:	4605      	mov	r5, r0
  if (uwTickFreq != 0U)
 8000192:	6818      	ldr	r0, [r3, #0]
 8000194:	b908      	cbnz	r0, 800019a <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8000196:	2001      	movs	r0, #1
 8000198:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800019a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800019e:	fbb3 f3f0 	udiv	r3, r3, r0
 80001a2:	4a0b      	ldr	r2, [pc, #44]	; (80001d0 <HAL_InitTick+0x44>)
 80001a4:	6810      	ldr	r0, [r2, #0]
 80001a6:	fbb0 f0f3 	udiv	r0, r0, r3
 80001aa:	f000 f88b 	bl	80002c4 <HAL_SYSTICK_Config>
 80001ae:	4604      	mov	r4, r0
 80001b0:	2800      	cmp	r0, #0
 80001b2:	d1f0      	bne.n	8000196 <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001b4:	2d0f      	cmp	r5, #15
 80001b6:	d8ee      	bhi.n	8000196 <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001b8:	4602      	mov	r2, r0
 80001ba:	4629      	mov	r1, r5
 80001bc:	f04f 30ff 	mov.w	r0, #4294967295
 80001c0:	f000 f83e 	bl	8000240 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80001c4:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <HAL_InitTick+0x48>)
 80001c6:	4620      	mov	r0, r4
 80001c8:	601d      	str	r5, [r3, #0]
  }

  /* Return function status */
  return status;
}
 80001ca:	bd38      	pop	{r3, r4, r5, pc}
 80001cc:	20000000 	.word	0x20000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	20000004 	.word	0x20000004

080001d8 <HAL_Init>:
{
 80001d8:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001da:	2003      	movs	r0, #3
 80001dc:	f000 f81e 	bl	800021c <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80001e0:	2000      	movs	r0, #0
 80001e2:	f7ff ffd3 	bl	800018c <HAL_InitTick>
 80001e6:	4604      	mov	r4, r0
 80001e8:	b918      	cbnz	r0, 80001f2 <HAL_Init+0x1a>
    HAL_MspInit();
 80001ea:	f000 ff3f 	bl	800106c <HAL_MspInit>
}
 80001ee:	4620      	mov	r0, r4
 80001f0:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80001f2:	2401      	movs	r4, #1
 80001f4:	e7fb      	b.n	80001ee <HAL_Init+0x16>
	...

080001f8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001f8:	4a03      	ldr	r2, [pc, #12]	; (8000208 <HAL_IncTick+0x10>)
 80001fa:	4904      	ldr	r1, [pc, #16]	; (800020c <HAL_IncTick+0x14>)
 80001fc:	6813      	ldr	r3, [r2, #0]
 80001fe:	6809      	ldr	r1, [r1, #0]
 8000200:	440b      	add	r3, r1
 8000202:	6013      	str	r3, [r2, #0]
 8000204:	4770      	bx	lr
 8000206:	bf00      	nop
 8000208:	20000028 	.word	0x20000028
 800020c:	20000000 	.word	0x20000000

08000210 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000210:	4b01      	ldr	r3, [pc, #4]	; (8000218 <HAL_GetTick+0x8>)
 8000212:	6818      	ldr	r0, [r3, #0]
}
 8000214:	4770      	bx	lr
 8000216:	bf00      	nop
 8000218:	20000028 	.word	0x20000028

0800021c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800021c:	4a07      	ldr	r2, [pc, #28]	; (800023c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800021e:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000220:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000222:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000226:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800022a:	041b      	lsls	r3, r3, #16
 800022c:	0c1b      	lsrs	r3, r3, #16
 800022e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000232:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000236:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000238:	60d3      	str	r3, [r2, #12]
 800023a:	4770      	bx	lr
 800023c:	e000ed00 	.word	0xe000ed00

08000240 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000240:	4b17      	ldr	r3, [pc, #92]	; (80002a0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000242:	b530      	push	{r4, r5, lr}
 8000244:	68dc      	ldr	r4, [r3, #12]
 8000246:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800024a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800024e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000250:	2b04      	cmp	r3, #4
 8000252:	bf28      	it	cs
 8000254:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000256:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000258:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800025c:	bf98      	it	ls
 800025e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000260:	fa05 f303 	lsl.w	r3, r5, r3
 8000264:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000268:	bf88      	it	hi
 800026a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800026c:	4019      	ands	r1, r3
 800026e:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000270:	fa05 f404 	lsl.w	r4, r5, r4
 8000274:	3c01      	subs	r4, #1
 8000276:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000278:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800027a:	ea42 0201 	orr.w	r2, r2, r1
 800027e:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000282:	bfa9      	itett	ge
 8000284:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000288:	4b06      	ldrlt	r3, [pc, #24]	; (80002a4 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028a:	b2d2      	uxtbge	r2, r2
 800028c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000290:	bfbb      	ittet	lt
 8000292:	f000 000f 	andlt.w	r0, r0, #15
 8000296:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000298:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800029c:	541a      	strblt	r2, [r3, r0]
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	e000ed00 	.word	0xe000ed00
 80002a4:	e000ed14 	.word	0xe000ed14

080002a8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80002a8:	2800      	cmp	r0, #0
 80002aa:	db08      	blt.n	80002be <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002ac:	2301      	movs	r3, #1
 80002ae:	0942      	lsrs	r2, r0, #5
 80002b0:	f000 001f 	and.w	r0, r0, #31
 80002b4:	fa03 f000 	lsl.w	r0, r3, r0
 80002b8:	4b01      	ldr	r3, [pc, #4]	; (80002c0 <HAL_NVIC_EnableIRQ+0x18>)
 80002ba:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80002be:	4770      	bx	lr
 80002c0:	e000e100 	.word	0xe000e100

080002c4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002c4:	3801      	subs	r0, #1
 80002c6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002ca:	d20a      	bcs.n	80002e2 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002cc:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002ce:	4b06      	ldr	r3, [pc, #24]	; (80002e8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d0:	4a06      	ldr	r2, [pc, #24]	; (80002ec <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002d2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002d8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002da:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002dc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002de:	601a      	str	r2, [r3, #0]
 80002e0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002e2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	e000e010 	.word	0xe000e010
 80002ec:	e000ed00 	.word	0xe000ed00

080002f0 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80002f0:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 80002f4:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80002f6:	2a02      	cmp	r2, #2
 80002f8:	d003      	beq.n	8000302 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80002fa:	2204      	movs	r2, #4
 80002fc:	6382      	str	r2, [r0, #56]	; 0x38

    status = HAL_ERROR;
 80002fe:	2001      	movs	r0, #1
 8000300:	bd10      	pop	{r4, pc}
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000302:	6802      	ldr	r2, [r0, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000304:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000306:	6811      	ldr	r1, [r2, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000308:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800030a:	f021 010e 	bic.w	r1, r1, #14
 800030e:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8000310:	6811      	ldr	r1, [r2, #0]
 8000312:	f021 0101 	bic.w	r1, r1, #1
 8000316:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000318:	2101      	movs	r1, #1
 800031a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800031c:	f002 021c 	and.w	r2, r2, #28
 8000320:	fa01 f202 	lsl.w	r2, r1, r2
 8000324:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8000326:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8000328:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 800032c:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8000330:	b113      	cbz	r3, 8000338 <HAL_DMA_Abort_IT+0x48>
    {
      hdma->XferAbortCallback(hdma);
 8000332:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000334:	4620      	mov	r0, r4
 8000336:	bd10      	pop	{r4, pc}
 8000338:	4618      	mov	r0, r3
    }
  }
  return status;
}
 800033a:	bd10      	pop	{r4, pc}

0800033c <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
  uint32_t position = 0x00;
 800033c:	2300      	movs	r3, #0
{ 
 800033e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000342:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000346:	f8df 9194 	ldr.w	r9, [pc, #404]	; 80004dc <HAL_GPIO_Init+0x1a0>
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800034a:	4a62      	ldr	r2, [pc, #392]	; (80004d4 <HAL_GPIO_Init+0x198>)
  while (((GPIO_Init->Pin) >> position) != 0)
 800034c:	fa38 f403 	lsrs.w	r4, r8, r3
 8000350:	d102      	bne.n	8000358 <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  } 
}
 8000352:	b003      	add	sp, #12
 8000354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000358:	f04f 0e01 	mov.w	lr, #1
 800035c:	fa0e fe03 	lsl.w	lr, lr, r3
    if(iocurrent)
 8000360:	ea18 060e 	ands.w	r6, r8, lr
 8000364:	f000 80a8 	beq.w	80004b8 <HAL_GPIO_Init+0x17c>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000368:	684c      	ldr	r4, [r1, #4]
 800036a:	f024 0710 	bic.w	r7, r4, #16
 800036e:	2f02      	cmp	r7, #2
 8000370:	d116      	bne.n	80003a0 <HAL_GPIO_Init+0x64>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8000372:	f04f 0c0f 	mov.w	ip, #15
        temp = GPIOx->AFR[position >> 3];
 8000376:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800037a:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 800037e:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000382:	f8da 5020 	ldr.w	r5, [sl, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8000386:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800038a:	fa0c fc0b 	lsl.w	ip, ip, fp
 800038e:	ea25 0c0c 	bic.w	ip, r5, ip
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8000392:	690d      	ldr	r5, [r1, #16]
 8000394:	fa05 f50b 	lsl.w	r5, r5, fp
 8000398:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 800039c:	f8ca 5020 	str.w	r5, [sl, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 80003a0:	2503      	movs	r5, #3
 80003a2:	ea4f 0a43 	mov.w	sl, r3, lsl #1
 80003a6:	fa05 f50a 	lsl.w	r5, r5, sl
 80003aa:	43ed      	mvns	r5, r5
      temp = GPIOx->MODER;
 80003ac:	f8d0 b000 	ldr.w	fp, [r0]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80003b0:	f004 0c03 	and.w	ip, r4, #3
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 80003b4:	ea0b 0b05 	and.w	fp, fp, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80003b8:	fa0c fc0a 	lsl.w	ip, ip, sl
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003bc:	3f01      	subs	r7, #1
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80003be:	ea4c 0c0b 	orr.w	ip, ip, fp
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003c2:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80003c4:	f8c0 c000 	str.w	ip, [r0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003c8:	d811      	bhi.n	80003ee <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR; 
 80003ca:	6887      	ldr	r7, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80003cc:	ea07 0b05 	and.w	fp, r7, r5
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80003d0:	68cf      	ldr	r7, [r1, #12]
 80003d2:	fa07 fc0a 	lsl.w	ip, r7, sl
 80003d6:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80003da:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80003dc:	6847      	ldr	r7, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80003de:	ea27 0e0e 	bic.w	lr, r7, lr
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80003e2:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80003e6:	409f      	lsls	r7, r3
 80003e8:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80003ec:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80003ee:	68c7      	ldr	r7, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80003f0:	403d      	ands	r5, r7
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80003f2:	688f      	ldr	r7, [r1, #8]
 80003f4:	fa07 f70a 	lsl.w	r7, r7, sl
 80003f8:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80003fa:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80003fc:	00e5      	lsls	r5, r4, #3
 80003fe:	d55b      	bpl.n	80004b8 <HAL_GPIO_Init+0x17c>
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000400:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000404:	f8d9 5020 	ldr.w	r5, [r9, #32]
 8000408:	f023 0703 	bic.w	r7, r3, #3
 800040c:	f045 0501 	orr.w	r5, r5, #1
 8000410:	f8c9 5020 	str.w	r5, [r9, #32]
 8000414:	f8d9 5020 	ldr.w	r5, [r9, #32]
 8000418:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800041c:	f005 0501 	and.w	r5, r5, #1
 8000420:	9501      	str	r5, [sp, #4]
 8000422:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000426:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800042a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800042c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp = SYSCFG->EXTICR[position >> 2];
 8000430:	f8d7 a008 	ldr.w	sl, [r7, #8]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000434:	fa0c f50e 	lsl.w	r5, ip, lr
 8000438:	ea2a 0c05 	bic.w	ip, sl, r5
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800043c:	4d26      	ldr	r5, [pc, #152]	; (80004d8 <HAL_GPIO_Init+0x19c>)
 800043e:	42a8      	cmp	r0, r5
 8000440:	d03c      	beq.n	80004bc <HAL_GPIO_Init+0x180>
 8000442:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000446:	42a8      	cmp	r0, r5
 8000448:	d03a      	beq.n	80004c0 <HAL_GPIO_Init+0x184>
 800044a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800044e:	42a8      	cmp	r0, r5
 8000450:	d038      	beq.n	80004c4 <HAL_GPIO_Init+0x188>
 8000452:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000456:	42a8      	cmp	r0, r5
 8000458:	d036      	beq.n	80004c8 <HAL_GPIO_Init+0x18c>
 800045a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800045e:	42a8      	cmp	r0, r5
 8000460:	d034      	beq.n	80004cc <HAL_GPIO_Init+0x190>
 8000462:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000466:	42a8      	cmp	r0, r5
 8000468:	d032      	beq.n	80004d0 <HAL_GPIO_Init+0x194>
 800046a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800046e:	42a8      	cmp	r0, r5
 8000470:	bf14      	ite	ne
 8000472:	2507      	movne	r5, #7
 8000474:	2506      	moveq	r5, #6
 8000476:	fa05 f50e 	lsl.w	r5, r5, lr
 800047a:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 800047e:	60bd      	str	r5, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000480:	43f7      	mvns	r7, r6
        temp = EXTI->IMR;
 8000482:	6815      	ldr	r5, [r2, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000484:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000488:	bf0c      	ite	eq
 800048a:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 800048c:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 800048e:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000490:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000492:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000496:	bf0c      	ite	eq
 8000498:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 800049a:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 800049c:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 800049e:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80004a0:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80004a4:	bf0c      	ite	eq
 80004a6:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 80004a8:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 80004aa:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80004ac:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80004ae:	02a4      	lsls	r4, r4, #10
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80004b0:	bf54      	ite	pl
 80004b2:	403d      	andpl	r5, r7
          SET_BIT(temp, iocurrent); 
 80004b4:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 80004b6:	60d5      	str	r5, [r2, #12]
    position++;
 80004b8:	3301      	adds	r3, #1
 80004ba:	e747      	b.n	800034c <HAL_GPIO_Init+0x10>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80004bc:	2500      	movs	r5, #0
 80004be:	e7da      	b.n	8000476 <HAL_GPIO_Init+0x13a>
 80004c0:	2501      	movs	r5, #1
 80004c2:	e7d8      	b.n	8000476 <HAL_GPIO_Init+0x13a>
 80004c4:	2502      	movs	r5, #2
 80004c6:	e7d6      	b.n	8000476 <HAL_GPIO_Init+0x13a>
 80004c8:	2503      	movs	r5, #3
 80004ca:	e7d4      	b.n	8000476 <HAL_GPIO_Init+0x13a>
 80004cc:	2504      	movs	r5, #4
 80004ce:	e7d2      	b.n	8000476 <HAL_GPIO_Init+0x13a>
 80004d0:	2505      	movs	r5, #5
 80004d2:	e7d0      	b.n	8000476 <HAL_GPIO_Init+0x13a>
 80004d4:	40010400 	.word	0x40010400
 80004d8:	40020000 	.word	0x40020000
 80004dc:	40023800 	.word	0x40023800

080004e0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80004e0:	b10a      	cbz	r2, 80004e6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80004e2:	6181      	str	r1, [r0, #24]
 80004e4:	4770      	bx	lr
 80004e6:	0409      	lsls	r1, r1, #16
 80004e8:	e7fb      	b.n	80004e2 <HAL_GPIO_WritePin+0x2>

080004ea <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80004ea:	6943      	ldr	r3, [r0, #20]
 80004ec:	420b      	tst	r3, r1
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80004ee:	bf18      	it	ne
 80004f0:	0409      	lslne	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80004f2:	6181      	str	r1, [r0, #24]
 80004f4:	4770      	bx	lr
	...

080004f8 <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80004f8:	4b1c      	ldr	r3, [pc, #112]	; (800056c <RCC_SetFlashLatencyFromMSIRange+0x74>)
{
 80004fa:	b082      	sub	sp, #8
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80004fc:	689a      	ldr	r2, [r3, #8]
 80004fe:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 8000502:	d00c      	beq.n	800051e <RCC_SetFlashLatencyFromMSIRange+0x26>
{
 8000504:	2200      	movs	r2, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8000506:	491a      	ldr	r1, [pc, #104]	; (8000570 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 8000508:	680b      	ldr	r3, [r1, #0]
 800050a:	f023 0301 	bic.w	r3, r3, #1
 800050e:	4313      	orrs	r3, r2
 8000510:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8000512:	6808      	ldr	r0, [r1, #0]
 8000514:	f000 0001 	and.w	r0, r0, #1
 8000518:	4050      	eors	r0, r2
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 800051a:	b002      	add	sp, #8
 800051c:	4770      	bx	lr
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800051e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000520:	4914      	ldr	r1, [pc, #80]	; (8000574 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8000522:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000526:	d00f      	beq.n	8000548 <RCC_SetFlashLatencyFromMSIRange+0x50>
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8000528:	680a      	ldr	r2, [r1, #0]
 800052a:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800052e:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 8000532:	d1e7      	bne.n	8000504 <RCC_SetFlashLatencyFromMSIRange+0xc>
 8000534:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 8000538:	d1e4      	bne.n	8000504 <RCC_SetFlashLatencyFromMSIRange+0xc>
  __HAL_FLASH_SET_LATENCY(latency);
 800053a:	4a0d      	ldr	r2, [pc, #52]	; (8000570 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 800053c:	6813      	ldr	r3, [r2, #0]
 800053e:	f043 0304 	orr.w	r3, r3, #4
 8000542:	6013      	str	r3, [r2, #0]
      latency = FLASH_LATENCY_1; /* 1WS */
 8000544:	2201      	movs	r2, #1
 8000546:	e7de      	b.n	8000506 <RCC_SetFlashLatencyFromMSIRange+0xe>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000548:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800054a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800054e:	625a      	str	r2, [r3, #36]	; 0x24
 8000550:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000552:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000556:	9201      	str	r2, [sp, #4]
 8000558:	9a01      	ldr	r2, [sp, #4]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800055a:	680a      	ldr	r2, [r1, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 800055c:	6a59      	ldr	r1, [r3, #36]	; 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800055e:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 8000562:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
 8000566:	6259      	str	r1, [r3, #36]	; 0x24
 8000568:	e7e1      	b.n	800052e <RCC_SetFlashLatencyFromMSIRange+0x36>
 800056a:	bf00      	nop
 800056c:	40023800 	.word	0x40023800
 8000570:	40023c00 	.word	0x40023c00
 8000574:	40007000 	.word	0x40007000

08000578 <HAL_RCC_OscConfig>:
{
 8000578:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 800057c:	4604      	mov	r4, r0
 800057e:	b908      	cbnz	r0, 8000584 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000580:	2001      	movs	r0, #1
 8000582:	e077      	b.n	8000674 <HAL_RCC_OscConfig+0xfc>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000584:	4ba0      	ldr	r3, [pc, #640]	; (8000808 <HAL_RCC_OscConfig+0x290>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000586:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000588:	689e      	ldr	r6, [r3, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800058a:	689f      	ldr	r7, [r3, #8]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800058c:	07d0      	lsls	r0, r2, #31
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800058e:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000592:	f407 3780 	and.w	r7, r7, #65536	; 0x10000
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000596:	d44b      	bmi.n	8000630 <HAL_RCC_OscConfig+0xb8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000598:	6823      	ldr	r3, [r4, #0]
 800059a:	0799      	lsls	r1, r3, #30
 800059c:	f100 8092 	bmi.w	80006c4 <HAL_RCC_OscConfig+0x14c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80005a0:	6823      	ldr	r3, [r4, #0]
 80005a2:	06d8      	lsls	r0, r3, #27
 80005a4:	d536      	bpl.n	8000614 <HAL_RCC_OscConfig+0x9c>
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 80005a6:	2e00      	cmp	r6, #0
 80005a8:	f040 80dc 	bne.w	8000764 <HAL_RCC_OscConfig+0x1ec>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80005ac:	4d96      	ldr	r5, [pc, #600]	; (8000808 <HAL_RCC_OscConfig+0x290>)
 80005ae:	682b      	ldr	r3, [r5, #0]
 80005b0:	0599      	lsls	r1, r3, #22
 80005b2:	d502      	bpl.n	80005ba <HAL_RCC_OscConfig+0x42>
 80005b4:	69a3      	ldr	r3, [r4, #24]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d0e2      	beq.n	8000580 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80005ba:	686b      	ldr	r3, [r5, #4]
 80005bc:	6a20      	ldr	r0, [r4, #32]
 80005be:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80005c2:	4298      	cmp	r0, r3
 80005c4:	f240 80bc 	bls.w	8000740 <HAL_RCC_OscConfig+0x1c8>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80005c8:	f7ff ff96 	bl	80004f8 <RCC_SetFlashLatencyFromMSIRange>
 80005cc:	2800      	cmp	r0, #0
 80005ce:	d1d7      	bne.n	8000580 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80005d0:	686b      	ldr	r3, [r5, #4]
 80005d2:	6a22      	ldr	r2, [r4, #32]
 80005d4:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80005d8:	4313      	orrs	r3, r2
 80005da:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80005dc:	686b      	ldr	r3, [r5, #4]
 80005de:	69e2      	ldr	r2, [r4, #28]
 80005e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80005e4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80005e8:	606b      	str	r3, [r5, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80005ea:	4b87      	ldr	r3, [pc, #540]	; (8000808 <HAL_RCC_OscConfig+0x290>)
 80005ec:	6899      	ldr	r1, [r3, #8]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80005ee:	6a23      	ldr	r3, [r4, #32]
 80005f0:	0b5b      	lsrs	r3, r3, #13
 80005f2:	1c5a      	adds	r2, r3, #1
 80005f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005f8:	4093      	lsls	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80005fa:	f3c1 1203 	ubfx	r2, r1, #4, #4
 80005fe:	4983      	ldr	r1, [pc, #524]	; (800080c <HAL_RCC_OscConfig+0x294>)
 8000600:	5c8a      	ldrb	r2, [r1, r2]
 8000602:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000604:	4a82      	ldr	r2, [pc, #520]	; (8000810 <HAL_RCC_OscConfig+0x298>)
 8000606:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 8000608:	4b82      	ldr	r3, [pc, #520]	; (8000814 <HAL_RCC_OscConfig+0x29c>)
 800060a:	6818      	ldr	r0, [r3, #0]
 800060c:	f7ff fdbe 	bl	800018c <HAL_InitTick>
        if(status != HAL_OK)
 8000610:	2800      	cmp	r0, #0
 8000612:	d12f      	bne.n	8000674 <HAL_RCC_OscConfig+0xfc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000614:	6823      	ldr	r3, [r4, #0]
 8000616:	0718      	lsls	r0, r3, #28
 8000618:	f100 80d3 	bmi.w	80007c2 <HAL_RCC_OscConfig+0x24a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800061c:	6823      	ldr	r3, [r4, #0]
 800061e:	0759      	lsls	r1, r3, #29
 8000620:	f100 8100 	bmi.w	8000824 <HAL_RCC_OscConfig+0x2ac>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000624:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000626:	2800      	cmp	r0, #0
 8000628:	f040 816a 	bne.w	8000900 <HAL_RCC_OscConfig+0x388>
  return HAL_OK;
 800062c:	2000      	movs	r0, #0
 800062e:	e021      	b.n	8000674 <HAL_RCC_OscConfig+0xfc>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000630:	2e08      	cmp	r6, #8
 8000632:	d002      	beq.n	800063a <HAL_RCC_OscConfig+0xc2>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000634:	2e0c      	cmp	r6, #12
 8000636:	d107      	bne.n	8000648 <HAL_RCC_OscConfig+0xd0>
 8000638:	b137      	cbz	r7, 8000648 <HAL_RCC_OscConfig+0xd0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	039a      	lsls	r2, r3, #14
 800063e:	d5ab      	bpl.n	8000598 <HAL_RCC_OscConfig+0x20>
 8000640:	6863      	ldr	r3, [r4, #4]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d1a8      	bne.n	8000598 <HAL_RCC_OscConfig+0x20>
 8000646:	e79b      	b.n	8000580 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000648:	6863      	ldr	r3, [r4, #4]
 800064a:	4d6f      	ldr	r5, [pc, #444]	; (8000808 <HAL_RCC_OscConfig+0x290>)
 800064c:	2b01      	cmp	r3, #1
 800064e:	d114      	bne.n	800067a <HAL_RCC_OscConfig+0x102>
 8000650:	682b      	ldr	r3, [r5, #0]
 8000652:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000656:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000658:	f7ff fdda 	bl	8000210 <HAL_GetTick>
 800065c:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800065e:	4d6a      	ldr	r5, [pc, #424]	; (8000808 <HAL_RCC_OscConfig+0x290>)
 8000660:	682b      	ldr	r3, [r5, #0]
 8000662:	039b      	lsls	r3, r3, #14
 8000664:	d498      	bmi.n	8000598 <HAL_RCC_OscConfig+0x20>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000666:	f7ff fdd3 	bl	8000210 <HAL_GetTick>
 800066a:	eba0 0008 	sub.w	r0, r0, r8
 800066e:	2864      	cmp	r0, #100	; 0x64
 8000670:	d9f6      	bls.n	8000660 <HAL_RCC_OscConfig+0xe8>
            return HAL_TIMEOUT;
 8000672:	2003      	movs	r0, #3
}
 8000674:	b003      	add	sp, #12
 8000676:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800067a:	b9ab      	cbnz	r3, 80006a8 <HAL_RCC_OscConfig+0x130>
 800067c:	682b      	ldr	r3, [r5, #0]
 800067e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000682:	602b      	str	r3, [r5, #0]
 8000684:	682b      	ldr	r3, [r5, #0]
 8000686:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800068a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800068c:	f7ff fdc0 	bl	8000210 <HAL_GetTick>
 8000690:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000692:	682b      	ldr	r3, [r5, #0]
 8000694:	0398      	lsls	r0, r3, #14
 8000696:	f57f af7f 	bpl.w	8000598 <HAL_RCC_OscConfig+0x20>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800069a:	f7ff fdb9 	bl	8000210 <HAL_GetTick>
 800069e:	eba0 0008 	sub.w	r0, r0, r8
 80006a2:	2864      	cmp	r0, #100	; 0x64
 80006a4:	d9f5      	bls.n	8000692 <HAL_RCC_OscConfig+0x11a>
 80006a6:	e7e4      	b.n	8000672 <HAL_RCC_OscConfig+0xfa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80006a8:	2b05      	cmp	r3, #5
 80006aa:	682b      	ldr	r3, [r5, #0]
 80006ac:	d103      	bne.n	80006b6 <HAL_RCC_OscConfig+0x13e>
 80006ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006b2:	602b      	str	r3, [r5, #0]
 80006b4:	e7cc      	b.n	8000650 <HAL_RCC_OscConfig+0xd8>
 80006b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006ba:	602b      	str	r3, [r5, #0]
 80006bc:	682b      	ldr	r3, [r5, #0]
 80006be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006c2:	e7c8      	b.n	8000656 <HAL_RCC_OscConfig+0xde>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80006c4:	2e04      	cmp	r6, #4
 80006c6:	d002      	beq.n	80006ce <HAL_RCC_OscConfig+0x156>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80006c8:	2e0c      	cmp	r6, #12
 80006ca:	d110      	bne.n	80006ee <HAL_RCC_OscConfig+0x176>
 80006cc:	b97f      	cbnz	r7, 80006ee <HAL_RCC_OscConfig+0x176>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80006ce:	4b4e      	ldr	r3, [pc, #312]	; (8000808 <HAL_RCC_OscConfig+0x290>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	0791      	lsls	r1, r2, #30
 80006d4:	d503      	bpl.n	80006de <HAL_RCC_OscConfig+0x166>
 80006d6:	68e2      	ldr	r2, [r4, #12]
 80006d8:	2a01      	cmp	r2, #1
 80006da:	f47f af51 	bne.w	8000580 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80006de:	685a      	ldr	r2, [r3, #4]
 80006e0:	6921      	ldr	r1, [r4, #16]
 80006e2:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 80006e6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80006ea:	605a      	str	r2, [r3, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80006ec:	e758      	b.n	80005a0 <HAL_RCC_OscConfig+0x28>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80006ee:	68e2      	ldr	r2, [r4, #12]
 80006f0:	4b49      	ldr	r3, [pc, #292]	; (8000818 <HAL_RCC_OscConfig+0x2a0>)
 80006f2:	b1b2      	cbz	r2, 8000722 <HAL_RCC_OscConfig+0x1aa>
        __HAL_RCC_HSI_ENABLE();
 80006f4:	2201      	movs	r2, #1
 80006f6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80006f8:	f7ff fd8a 	bl	8000210 <HAL_GetTick>
 80006fc:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80006fe:	4d42      	ldr	r5, [pc, #264]	; (8000808 <HAL_RCC_OscConfig+0x290>)
 8000700:	682b      	ldr	r3, [r5, #0]
 8000702:	079a      	lsls	r2, r3, #30
 8000704:	d507      	bpl.n	8000716 <HAL_RCC_OscConfig+0x19e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000706:	686b      	ldr	r3, [r5, #4]
 8000708:	6922      	ldr	r2, [r4, #16]
 800070a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800070e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000712:	606b      	str	r3, [r5, #4]
 8000714:	e744      	b.n	80005a0 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000716:	f7ff fd7b 	bl	8000210 <HAL_GetTick>
 800071a:	1bc0      	subs	r0, r0, r7
 800071c:	2802      	cmp	r0, #2
 800071e:	d9ef      	bls.n	8000700 <HAL_RCC_OscConfig+0x188>
 8000720:	e7a7      	b.n	8000672 <HAL_RCC_OscConfig+0xfa>
        __HAL_RCC_HSI_DISABLE();
 8000722:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000724:	f7ff fd74 	bl	8000210 <HAL_GetTick>
 8000728:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800072a:	4d37      	ldr	r5, [pc, #220]	; (8000808 <HAL_RCC_OscConfig+0x290>)
 800072c:	682b      	ldr	r3, [r5, #0]
 800072e:	079b      	lsls	r3, r3, #30
 8000730:	f57f af36 	bpl.w	80005a0 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000734:	f7ff fd6c 	bl	8000210 <HAL_GetTick>
 8000738:	1bc0      	subs	r0, r0, r7
 800073a:	2802      	cmp	r0, #2
 800073c:	d9f6      	bls.n	800072c <HAL_RCC_OscConfig+0x1b4>
 800073e:	e798      	b.n	8000672 <HAL_RCC_OscConfig+0xfa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000740:	686b      	ldr	r3, [r5, #4]
 8000742:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000746:	4303      	orrs	r3, r0
 8000748:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800074a:	686b      	ldr	r3, [r5, #4]
 800074c:	69e2      	ldr	r2, [r4, #28]
 800074e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000752:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000756:	606b      	str	r3, [r5, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000758:	f7ff fece 	bl	80004f8 <RCC_SetFlashLatencyFromMSIRange>
 800075c:	2800      	cmp	r0, #0
 800075e:	f43f af44 	beq.w	80005ea <HAL_RCC_OscConfig+0x72>
 8000762:	e70d      	b.n	8000580 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000764:	69a2      	ldr	r2, [r4, #24]
 8000766:	4b2d      	ldr	r3, [pc, #180]	; (800081c <HAL_RCC_OscConfig+0x2a4>)
 8000768:	b1e2      	cbz	r2, 80007a4 <HAL_RCC_OscConfig+0x22c>
        __HAL_RCC_MSI_ENABLE();
 800076a:	2201      	movs	r2, #1
 800076c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800076e:	f7ff fd4f 	bl	8000210 <HAL_GetTick>
 8000772:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000774:	4d24      	ldr	r5, [pc, #144]	; (8000808 <HAL_RCC_OscConfig+0x290>)
 8000776:	682b      	ldr	r3, [r5, #0]
 8000778:	059a      	lsls	r2, r3, #22
 800077a:	d50d      	bpl.n	8000798 <HAL_RCC_OscConfig+0x220>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800077c:	686b      	ldr	r3, [r5, #4]
 800077e:	6a22      	ldr	r2, [r4, #32]
 8000780:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000784:	4313      	orrs	r3, r2
 8000786:	606b      	str	r3, [r5, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000788:	686b      	ldr	r3, [r5, #4]
 800078a:	69e2      	ldr	r2, [r4, #28]
 800078c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000790:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000794:	606b      	str	r3, [r5, #4]
 8000796:	e73d      	b.n	8000614 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000798:	f7ff fd3a 	bl	8000210 <HAL_GetTick>
 800079c:	1bc0      	subs	r0, r0, r7
 800079e:	2802      	cmp	r0, #2
 80007a0:	d9e9      	bls.n	8000776 <HAL_RCC_OscConfig+0x1fe>
 80007a2:	e766      	b.n	8000672 <HAL_RCC_OscConfig+0xfa>
        __HAL_RCC_MSI_DISABLE();
 80007a4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80007a6:	f7ff fd33 	bl	8000210 <HAL_GetTick>
 80007aa:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80007ac:	4d16      	ldr	r5, [pc, #88]	; (8000808 <HAL_RCC_OscConfig+0x290>)
 80007ae:	682b      	ldr	r3, [r5, #0]
 80007b0:	059b      	lsls	r3, r3, #22
 80007b2:	f57f af2f 	bpl.w	8000614 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80007b6:	f7ff fd2b 	bl	8000210 <HAL_GetTick>
 80007ba:	1bc0      	subs	r0, r0, r7
 80007bc:	2802      	cmp	r0, #2
 80007be:	d9f6      	bls.n	80007ae <HAL_RCC_OscConfig+0x236>
 80007c0:	e757      	b.n	8000672 <HAL_RCC_OscConfig+0xfa>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80007c2:	6962      	ldr	r2, [r4, #20]
 80007c4:	4b16      	ldr	r3, [pc, #88]	; (8000820 <HAL_RCC_OscConfig+0x2a8>)
 80007c6:	b17a      	cbz	r2, 80007e8 <HAL_RCC_OscConfig+0x270>
      __HAL_RCC_LSI_ENABLE();
 80007c8:	2201      	movs	r2, #1
 80007ca:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80007cc:	f7ff fd20 	bl	8000210 <HAL_GetTick>
 80007d0:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80007d2:	4d0d      	ldr	r5, [pc, #52]	; (8000808 <HAL_RCC_OscConfig+0x290>)
 80007d4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80007d6:	079a      	lsls	r2, r3, #30
 80007d8:	f53f af20 	bmi.w	800061c <HAL_RCC_OscConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80007dc:	f7ff fd18 	bl	8000210 <HAL_GetTick>
 80007e0:	1bc0      	subs	r0, r0, r7
 80007e2:	2802      	cmp	r0, #2
 80007e4:	d9f6      	bls.n	80007d4 <HAL_RCC_OscConfig+0x25c>
 80007e6:	e744      	b.n	8000672 <HAL_RCC_OscConfig+0xfa>
      __HAL_RCC_LSI_DISABLE();
 80007e8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80007ea:	f7ff fd11 	bl	8000210 <HAL_GetTick>
 80007ee:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80007f0:	4d05      	ldr	r5, [pc, #20]	; (8000808 <HAL_RCC_OscConfig+0x290>)
 80007f2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80007f4:	079b      	lsls	r3, r3, #30
 80007f6:	f57f af11 	bpl.w	800061c <HAL_RCC_OscConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80007fa:	f7ff fd09 	bl	8000210 <HAL_GetTick>
 80007fe:	1bc0      	subs	r0, r0, r7
 8000800:	2802      	cmp	r0, #2
 8000802:	d9f6      	bls.n	80007f2 <HAL_RCC_OscConfig+0x27a>
 8000804:	e735      	b.n	8000672 <HAL_RCC_OscConfig+0xfa>
 8000806:	bf00      	nop
 8000808:	40023800 	.word	0x40023800
 800080c:	08001284 	.word	0x08001284
 8000810:	20000008 	.word	0x20000008
 8000814:	20000004 	.word	0x20000004
 8000818:	42470000 	.word	0x42470000
 800081c:	42470020 	.word	0x42470020
 8000820:	42470680 	.word	0x42470680
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000824:	4b60      	ldr	r3, [pc, #384]	; (80009a8 <HAL_RCC_OscConfig+0x430>)
 8000826:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000828:	00d0      	lsls	r0, r2, #3
 800082a:	d429      	bmi.n	8000880 <HAL_RCC_OscConfig+0x308>
      pwrclkchanged = SET;
 800082c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800082e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000830:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000834:	625a      	str	r2, [r3, #36]	; 0x24
 8000836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083c:	9301      	str	r3, [sp, #4]
 800083e:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000840:	4d5a      	ldr	r5, [pc, #360]	; (80009ac <HAL_RCC_OscConfig+0x434>)
 8000842:	682b      	ldr	r3, [r5, #0]
 8000844:	05d9      	lsls	r1, r3, #23
 8000846:	d51d      	bpl.n	8000884 <HAL_RCC_OscConfig+0x30c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000848:	68a3      	ldr	r3, [r4, #8]
 800084a:	4d57      	ldr	r5, [pc, #348]	; (80009a8 <HAL_RCC_OscConfig+0x430>)
 800084c:	2b01      	cmp	r3, #1
 800084e:	d12a      	bne.n	80008a6 <HAL_RCC_OscConfig+0x32e>
 8000850:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000852:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000856:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000858:	f7ff fcda 	bl	8000210 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800085c:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000860:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000862:	f8df 8144 	ldr.w	r8, [pc, #324]	; 80009a8 <HAL_RCC_OscConfig+0x430>
 8000866:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 800086a:	059b      	lsls	r3, r3, #22
 800086c:	d541      	bpl.n	80008f2 <HAL_RCC_OscConfig+0x37a>
    if(pwrclkchanged == SET)
 800086e:	2f00      	cmp	r7, #0
 8000870:	f43f aed8 	beq.w	8000624 <HAL_RCC_OscConfig+0xac>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000874:	4a4c      	ldr	r2, [pc, #304]	; (80009a8 <HAL_RCC_OscConfig+0x430>)
 8000876:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000878:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800087c:	6253      	str	r3, [r2, #36]	; 0x24
 800087e:	e6d1      	b.n	8000624 <HAL_RCC_OscConfig+0xac>
    FlagStatus       pwrclkchanged = RESET;
 8000880:	2700      	movs	r7, #0
 8000882:	e7dd      	b.n	8000840 <HAL_RCC_OscConfig+0x2c8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000884:	682b      	ldr	r3, [r5, #0]
 8000886:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800088a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800088c:	f7ff fcc0 	bl	8000210 <HAL_GetTick>
 8000890:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000892:	682b      	ldr	r3, [r5, #0]
 8000894:	05da      	lsls	r2, r3, #23
 8000896:	d4d7      	bmi.n	8000848 <HAL_RCC_OscConfig+0x2d0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000898:	f7ff fcba 	bl	8000210 <HAL_GetTick>
 800089c:	eba0 0008 	sub.w	r0, r0, r8
 80008a0:	2864      	cmp	r0, #100	; 0x64
 80008a2:	d9f6      	bls.n	8000892 <HAL_RCC_OscConfig+0x31a>
 80008a4:	e6e5      	b.n	8000672 <HAL_RCC_OscConfig+0xfa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008a6:	b9b3      	cbnz	r3, 80008d6 <HAL_RCC_OscConfig+0x35e>
 80008a8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008aa:	f241 3988 	movw	r9, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80008b2:	636b      	str	r3, [r5, #52]	; 0x34
 80008b4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80008b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80008ba:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80008bc:	f7ff fca8 	bl	8000210 <HAL_GetTick>
 80008c0:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80008c2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80008c4:	0598      	lsls	r0, r3, #22
 80008c6:	d5d2      	bpl.n	800086e <HAL_RCC_OscConfig+0x2f6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008c8:	f7ff fca2 	bl	8000210 <HAL_GetTick>
 80008cc:	eba0 0008 	sub.w	r0, r0, r8
 80008d0:	4548      	cmp	r0, r9
 80008d2:	d9f6      	bls.n	80008c2 <HAL_RCC_OscConfig+0x34a>
 80008d4:	e6cd      	b.n	8000672 <HAL_RCC_OscConfig+0xfa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008d6:	2b05      	cmp	r3, #5
 80008d8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80008da:	d103      	bne.n	80008e4 <HAL_RCC_OscConfig+0x36c>
 80008dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008e0:	636b      	str	r3, [r5, #52]	; 0x34
 80008e2:	e7b5      	b.n	8000850 <HAL_RCC_OscConfig+0x2d8>
 80008e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80008e8:	636b      	str	r3, [r5, #52]	; 0x34
 80008ea:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80008ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80008f0:	e7b1      	b.n	8000856 <HAL_RCC_OscConfig+0x2de>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008f2:	f7ff fc8d 	bl	8000210 <HAL_GetTick>
 80008f6:	eba0 0009 	sub.w	r0, r0, r9
 80008fa:	42a8      	cmp	r0, r5
 80008fc:	d9b3      	bls.n	8000866 <HAL_RCC_OscConfig+0x2ee>
 80008fe:	e6b8      	b.n	8000672 <HAL_RCC_OscConfig+0xfa>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000900:	2e0c      	cmp	r6, #12
 8000902:	d039      	beq.n	8000978 <HAL_RCC_OscConfig+0x400>
 8000904:	2300      	movs	r3, #0
 8000906:	4d2a      	ldr	r5, [pc, #168]	; (80009b0 <HAL_RCC_OscConfig+0x438>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000908:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800090a:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800090c:	d126      	bne.n	800095c <HAL_RCC_OscConfig+0x3e4>
        tickstart = HAL_GetTick();
 800090e:	f7ff fc7f 	bl	8000210 <HAL_GetTick>
 8000912:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000914:	4e24      	ldr	r6, [pc, #144]	; (80009a8 <HAL_RCC_OscConfig+0x430>)
 8000916:	6833      	ldr	r3, [r6, #0]
 8000918:	0199      	lsls	r1, r3, #6
 800091a:	d419      	bmi.n	8000950 <HAL_RCC_OscConfig+0x3d8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800091c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800091e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000920:	68b2      	ldr	r2, [r6, #8]
 8000922:	430b      	orrs	r3, r1
 8000924:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 8000928:	4313      	orrs	r3, r2
 800092a:	6b22      	ldr	r2, [r4, #48]	; 0x30
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800092c:	4c1e      	ldr	r4, [pc, #120]	; (80009a8 <HAL_RCC_OscConfig+0x430>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800092e:	4313      	orrs	r3, r2
 8000930:	60b3      	str	r3, [r6, #8]
        __HAL_RCC_PLL_ENABLE();
 8000932:	2301      	movs	r3, #1
 8000934:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000936:	f7ff fc6b 	bl	8000210 <HAL_GetTick>
 800093a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800093c:	6823      	ldr	r3, [r4, #0]
 800093e:	019a      	lsls	r2, r3, #6
 8000940:	f53f ae74 	bmi.w	800062c <HAL_RCC_OscConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000944:	f7ff fc64 	bl	8000210 <HAL_GetTick>
 8000948:	1b40      	subs	r0, r0, r5
 800094a:	2802      	cmp	r0, #2
 800094c:	d9f6      	bls.n	800093c <HAL_RCC_OscConfig+0x3c4>
 800094e:	e690      	b.n	8000672 <HAL_RCC_OscConfig+0xfa>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000950:	f7ff fc5e 	bl	8000210 <HAL_GetTick>
 8000954:	1bc0      	subs	r0, r0, r7
 8000956:	2802      	cmp	r0, #2
 8000958:	d9dd      	bls.n	8000916 <HAL_RCC_OscConfig+0x39e>
 800095a:	e68a      	b.n	8000672 <HAL_RCC_OscConfig+0xfa>
        tickstart = HAL_GetTick();
 800095c:	f7ff fc58 	bl	8000210 <HAL_GetTick>
 8000960:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000962:	4c11      	ldr	r4, [pc, #68]	; (80009a8 <HAL_RCC_OscConfig+0x430>)
 8000964:	6823      	ldr	r3, [r4, #0]
 8000966:	019b      	lsls	r3, r3, #6
 8000968:	f57f ae60 	bpl.w	800062c <HAL_RCC_OscConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800096c:	f7ff fc50 	bl	8000210 <HAL_GetTick>
 8000970:	1b40      	subs	r0, r0, r5
 8000972:	2802      	cmp	r0, #2
 8000974:	d9f6      	bls.n	8000964 <HAL_RCC_OscConfig+0x3ec>
 8000976:	e67c      	b.n	8000672 <HAL_RCC_OscConfig+0xfa>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000978:	2801      	cmp	r0, #1
 800097a:	f43f ae7b 	beq.w	8000674 <HAL_RCC_OscConfig+0xfc>
        pll_config = RCC->CFGR;
 800097e:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <HAL_RCC_OscConfig+0x430>)
 8000980:	6898      	ldr	r0, [r3, #8]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000982:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000984:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8000988:	429a      	cmp	r2, r3
 800098a:	f47f adf9 	bne.w	8000580 <HAL_RCC_OscConfig+0x8>
 800098e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000990:	f400 1370 	and.w	r3, r0, #3932160	; 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000994:	4293      	cmp	r3, r2
 8000996:	f47f adf3 	bne.w	8000580 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800099a:	6b23      	ldr	r3, [r4, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800099c:	f400 0040 	and.w	r0, r0, #12582912	; 0xc00000
    return HAL_ERROR;
 80009a0:	1ac0      	subs	r0, r0, r3
 80009a2:	bf18      	it	ne
 80009a4:	2001      	movne	r0, #1
 80009a6:	e665      	b.n	8000674 <HAL_RCC_OscConfig+0xfc>
 80009a8:	40023800 	.word	0x40023800
 80009ac:	40007000 	.word	0x40007000
 80009b0:	42470060 	.word	0x42470060

080009b4 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 80009b4:	4a12      	ldr	r2, [pc, #72]	; (8000a00 <HAL_RCC_GetSysClockFreq+0x4c>)
 80009b6:	6893      	ldr	r3, [r2, #8]
  switch (tmpreg & RCC_CFGR_SWS)
 80009b8:	f003 010c 	and.w	r1, r3, #12
 80009bc:	2908      	cmp	r1, #8
 80009be:	d005      	beq.n	80009cc <HAL_RCC_GetSysClockFreq+0x18>
 80009c0:	290c      	cmp	r1, #12
 80009c2:	d005      	beq.n	80009d0 <HAL_RCC_GetSysClockFreq+0x1c>
 80009c4:	2904      	cmp	r1, #4
 80009c6:	d113      	bne.n	80009f0 <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = HSI_VALUE;
 80009c8:	480e      	ldr	r0, [pc, #56]	; (8000a04 <HAL_RCC_GetSysClockFreq+0x50>)
}
 80009ca:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 80009cc:	480e      	ldr	r0, [pc, #56]	; (8000a08 <HAL_RCC_GetSysClockFreq+0x54>)
 80009ce:	4770      	bx	lr
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80009d0:	480e      	ldr	r0, [pc, #56]	; (8000a0c <HAL_RCC_GetSysClockFreq+0x58>)
 80009d2:	f3c3 4183 	ubfx	r1, r3, #18, #4
 80009d6:	5c41      	ldrb	r1, [r0, r1]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80009d8:	f3c3 5081 	ubfx	r0, r3, #22, #2
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80009dc:	6893      	ldr	r3, [r2, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80009de:	3001      	adds	r0, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80009e0:	03db      	lsls	r3, r3, #15
        pllvco = (HSE_VALUE * pllm) / plld;
 80009e2:	bf4c      	ite	mi
 80009e4:	4b08      	ldrmi	r3, [pc, #32]	; (8000a08 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (HSI_VALUE * pllm) / plld;
 80009e6:	4b07      	ldrpl	r3, [pc, #28]	; (8000a04 <HAL_RCC_GetSysClockFreq+0x50>)
 80009e8:	434b      	muls	r3, r1
 80009ea:	fbb3 f0f0 	udiv	r0, r3, r0
 80009ee:	4770      	bx	lr
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80009f0:	6850      	ldr	r0, [r2, #4]
 80009f2:	f3c0 3042 	ubfx	r0, r0, #13, #3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80009f6:	1c43      	adds	r3, r0, #1
 80009f8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80009fc:	4098      	lsls	r0, r3
 80009fe:	4770      	bx	lr
 8000a00:	40023800 	.word	0x40023800
 8000a04:	00f42400 	.word	0x00f42400
 8000a08:	016e3600 	.word	0x016e3600
 8000a0c:	0800129c 	.word	0x0800129c

08000a10 <HAL_RCC_ClockConfig>:
{
 8000a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a14:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000a16:	4604      	mov	r4, r0
 8000a18:	b910      	cbnz	r0, 8000a20 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000a1a:	2001      	movs	r0, #1
 8000a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000a20:	4b57      	ldr	r3, [pc, #348]	; (8000b80 <HAL_RCC_ClockConfig+0x170>)
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	f002 0201 	and.w	r2, r2, #1
 8000a28:	428a      	cmp	r2, r1
 8000a2a:	d32a      	bcc.n	8000a82 <HAL_RCC_ClockConfig+0x72>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000a2c:	6822      	ldr	r2, [r4, #0]
 8000a2e:	0796      	lsls	r6, r2, #30
 8000a30:	d438      	bmi.n	8000aa4 <HAL_RCC_ClockConfig+0x94>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000a32:	07d0      	lsls	r0, r2, #31
 8000a34:	d43e      	bmi.n	8000ab4 <HAL_RCC_ClockConfig+0xa4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000a36:	4b52      	ldr	r3, [pc, #328]	; (8000b80 <HAL_RCC_ClockConfig+0x170>)
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	f002 0201 	and.w	r2, r2, #1
 8000a3e:	4295      	cmp	r5, r2
 8000a40:	f0c0 808d 	bcc.w	8000b5e <HAL_RCC_ClockConfig+0x14e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a44:	6822      	ldr	r2, [r4, #0]
 8000a46:	0751      	lsls	r1, r2, #29
 8000a48:	f100 8092 	bmi.w	8000b70 <HAL_RCC_ClockConfig+0x160>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000a4c:	0713      	lsls	r3, r2, #28
 8000a4e:	d507      	bpl.n	8000a60 <HAL_RCC_ClockConfig+0x50>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000a50:	4a4c      	ldr	r2, [pc, #304]	; (8000b84 <HAL_RCC_ClockConfig+0x174>)
 8000a52:	6921      	ldr	r1, [r4, #16]
 8000a54:	6893      	ldr	r3, [r2, #8]
 8000a56:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000a5a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000a5e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000a60:	f7ff ffa8 	bl	80009b4 <HAL_RCC_GetSysClockFreq>
}
 8000a64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000a68:	4b46      	ldr	r3, [pc, #280]	; (8000b84 <HAL_RCC_ClockConfig+0x174>)
 8000a6a:	4a47      	ldr	r2, [pc, #284]	; (8000b88 <HAL_RCC_ClockConfig+0x178>)
 8000a6c:	689b      	ldr	r3, [r3, #8]
 8000a6e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000a72:	5cd3      	ldrb	r3, [r2, r3]
 8000a74:	40d8      	lsrs	r0, r3
 8000a76:	4b45      	ldr	r3, [pc, #276]	; (8000b8c <HAL_RCC_ClockConfig+0x17c>)
 8000a78:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8000a7a:	4b45      	ldr	r3, [pc, #276]	; (8000b90 <HAL_RCC_ClockConfig+0x180>)
 8000a7c:	6818      	ldr	r0, [r3, #0]
 8000a7e:	f7ff bb85 	b.w	800018c <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a82:	2901      	cmp	r1, #1
 8000a84:	bf02      	ittt	eq
 8000a86:	681a      	ldreq	r2, [r3, #0]
 8000a88:	f042 0204 	orreq.w	r2, r2, #4
 8000a8c:	601a      	streq	r2, [r3, #0]
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	f022 0201 	bic.w	r2, r2, #1
 8000a94:	430a      	orrs	r2, r1
 8000a96:	601a      	str	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	d1bb      	bne.n	8000a1a <HAL_RCC_ClockConfig+0xa>
 8000aa2:	e7c3      	b.n	8000a2c <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000aa4:	4937      	ldr	r1, [pc, #220]	; (8000b84 <HAL_RCC_ClockConfig+0x174>)
 8000aa6:	68a0      	ldr	r0, [r4, #8]
 8000aa8:	688b      	ldr	r3, [r1, #8]
 8000aaa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000aae:	4303      	orrs	r3, r0
 8000ab0:	608b      	str	r3, [r1, #8]
 8000ab2:	e7be      	b.n	8000a32 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ab4:	6861      	ldr	r1, [r4, #4]
 8000ab6:	4b33      	ldr	r3, [pc, #204]	; (8000b84 <HAL_RCC_ClockConfig+0x174>)
 8000ab8:	2902      	cmp	r1, #2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000aba:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000abc:	d11d      	bne.n	8000afa <HAL_RCC_ClockConfig+0xea>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000abe:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000ac2:	d0aa      	beq.n	8000a1a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ac4:	689a      	ldr	r2, [r3, #8]
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ac6:	4f2f      	ldr	r7, [pc, #188]	; (8000b84 <HAL_RCC_ClockConfig+0x174>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ac8:	f022 0203 	bic.w	r2, r2, #3
 8000acc:	430a      	orrs	r2, r1
 8000ace:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000ad0:	f7ff fb9e 	bl	8000210 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ad4:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8000ad6:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ad8:	2b02      	cmp	r3, #2
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ada:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ade:	d119      	bne.n	8000b14 <HAL_RCC_ClockConfig+0x104>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	f003 030c 	and.w	r3, r3, #12
 8000ae6:	2b08      	cmp	r3, #8
 8000ae8:	d0a5      	beq.n	8000a36 <HAL_RCC_ClockConfig+0x26>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000aea:	f7ff fb91 	bl	8000210 <HAL_GetTick>
 8000aee:	1b80      	subs	r0, r0, r6
 8000af0:	4540      	cmp	r0, r8
 8000af2:	d9f5      	bls.n	8000ae0 <HAL_RCC_ClockConfig+0xd0>
          return HAL_TIMEOUT;
 8000af4:	2003      	movs	r0, #3
 8000af6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000afa:	2903      	cmp	r1, #3
 8000afc:	d102      	bne.n	8000b04 <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000afe:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000b02:	e7de      	b.n	8000ac2 <HAL_RCC_ClockConfig+0xb2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000b04:	2901      	cmp	r1, #1
 8000b06:	d102      	bne.n	8000b0e <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000b08:	f012 0f02 	tst.w	r2, #2
 8000b0c:	e7d9      	b.n	8000ac2 <HAL_RCC_ClockConfig+0xb2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000b0e:	f412 7f00 	tst.w	r2, #512	; 0x200
 8000b12:	e7d6      	b.n	8000ac2 <HAL_RCC_ClockConfig+0xb2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b14:	2b03      	cmp	r3, #3
 8000b16:	d10a      	bne.n	8000b2e <HAL_RCC_ClockConfig+0x11e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	f003 030c 	and.w	r3, r3, #12
 8000b1e:	2b0c      	cmp	r3, #12
 8000b20:	d089      	beq.n	8000a36 <HAL_RCC_ClockConfig+0x26>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b22:	f7ff fb75 	bl	8000210 <HAL_GetTick>
 8000b26:	1b80      	subs	r0, r0, r6
 8000b28:	4540      	cmp	r0, r8
 8000b2a:	d9f5      	bls.n	8000b18 <HAL_RCC_ClockConfig+0x108>
 8000b2c:	e7e2      	b.n	8000af4 <HAL_RCC_ClockConfig+0xe4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d110      	bne.n	8000b54 <HAL_RCC_ClockConfig+0x144>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	f003 030c 	and.w	r3, r3, #12
 8000b38:	2b04      	cmp	r3, #4
 8000b3a:	f43f af7c 	beq.w	8000a36 <HAL_RCC_ClockConfig+0x26>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b3e:	f7ff fb67 	bl	8000210 <HAL_GetTick>
 8000b42:	1b80      	subs	r0, r0, r6
 8000b44:	4540      	cmp	r0, r8
 8000b46:	d9f4      	bls.n	8000b32 <HAL_RCC_ClockConfig+0x122>
 8000b48:	e7d4      	b.n	8000af4 <HAL_RCC_ClockConfig+0xe4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b4a:	f7ff fb61 	bl	8000210 <HAL_GetTick>
 8000b4e:	1b80      	subs	r0, r0, r6
 8000b50:	4540      	cmp	r0, r8
 8000b52:	d8cf      	bhi.n	8000af4 <HAL_RCC_ClockConfig+0xe4>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	f013 0f0c 	tst.w	r3, #12
 8000b5a:	d1f6      	bne.n	8000b4a <HAL_RCC_ClockConfig+0x13a>
 8000b5c:	e76b      	b.n	8000a36 <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	f022 0201 	bic.w	r2, r2, #1
 8000b64:	601a      	str	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	07da      	lsls	r2, r3, #31
 8000b6a:	f53f af56 	bmi.w	8000a1a <HAL_RCC_ClockConfig+0xa>
 8000b6e:	e769      	b.n	8000a44 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000b70:	4904      	ldr	r1, [pc, #16]	; (8000b84 <HAL_RCC_ClockConfig+0x174>)
 8000b72:	68e0      	ldr	r0, [r4, #12]
 8000b74:	688b      	ldr	r3, [r1, #8]
 8000b76:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b7a:	4303      	orrs	r3, r0
 8000b7c:	608b      	str	r3, [r1, #8]
 8000b7e:	e765      	b.n	8000a4c <HAL_RCC_ClockConfig+0x3c>
 8000b80:	40023c00 	.word	0x40023c00
 8000b84:	40023800 	.word	0x40023800
 8000b88:	08001284 	.word	0x08001284
 8000b8c:	20000008 	.word	0x20000008
 8000b90:	20000004 	.word	0x20000004

08000b94 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000b94:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000b96:	4a05      	ldr	r2, [pc, #20]	; (8000bac <HAL_RCC_GetPCLK1Freq+0x18>)
 8000b98:	689b      	ldr	r3, [r3, #8]
 8000b9a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000b9e:	5cd3      	ldrb	r3, [r2, r3]
 8000ba0:	4a03      	ldr	r2, [pc, #12]	; (8000bb0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000ba2:	6810      	ldr	r0, [r2, #0]
}
 8000ba4:	40d8      	lsrs	r0, r3
 8000ba6:	4770      	bx	lr
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	08001294 	.word	0x08001294
 8000bb0:	20000008 	.word	0x20000008

08000bb4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000bb4:	4b04      	ldr	r3, [pc, #16]	; (8000bc8 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000bb6:	4a05      	ldr	r2, [pc, #20]	; (8000bcc <HAL_RCC_GetPCLK2Freq+0x18>)
 8000bb8:	689b      	ldr	r3, [r3, #8]
 8000bba:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000bbe:	5cd3      	ldrb	r3, [r2, r3]
 8000bc0:	4a03      	ldr	r2, [pc, #12]	; (8000bd0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000bc2:	6810      	ldr	r0, [r2, #0]
}
 8000bc4:	40d8      	lsrs	r0, r3
 8000bc6:	4770      	bx	lr
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	08001294 	.word	0x08001294
 8000bd0:	20000008 	.word	0x20000008

08000bd4 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8000bd4:	6803      	ldr	r3, [r0, #0]
 8000bd6:	68da      	ldr	r2, [r3, #12]
 8000bd8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8000bdc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000bde:	695a      	ldr	r2, [r3, #20]
 8000be0:	f022 0201 	bic.w	r2, r2, #1
 8000be4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8000be6:	2320      	movs	r3, #32
 8000be8:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8000bec:	4770      	bx	lr
	...

08000bf0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000bf0:	b538      	push	{r3, r4, r5, lr}
 8000bf2:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000bf4:	6802      	ldr	r2, [r0, #0]
 8000bf6:	68c1      	ldr	r1, [r0, #12]
 8000bf8:	6913      	ldr	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000bfa:	692c      	ldr	r4, [r5, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000bfc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c00:	430b      	orrs	r3, r1
 8000c02:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000c04:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(huart->Instance->CR1,
 8000c06:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000c08:	4323      	orrs	r3, r4
 8000c0a:	696c      	ldr	r4, [r5, #20]
 8000c0c:	69c0      	ldr	r0, [r0, #28]
 8000c0e:	4323      	orrs	r3, r4
  MODIFY_REG(huart->Instance->CR1,
 8000c10:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8000c14:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000c18:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8000c1a:	430b      	orrs	r3, r1
 8000c1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000c1e:	6953      	ldr	r3, [r2, #20]
 8000c20:	69a9      	ldr	r1, [r5, #24]
 8000c22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c26:	430b      	orrs	r3, r1

  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000c28:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000c2c:	6153      	str	r3, [r2, #20]
 8000c2e:	4b1f      	ldr	r3, [pc, #124]	; (8000cac <UART_SetConfig+0xbc>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000c30:	d121      	bne.n	8000c76 <UART_SetConfig+0x86>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 8000c32:	429a      	cmp	r2, r3
 8000c34:	f04f 0419 	mov.w	r4, #25
 8000c38:	d11a      	bne.n	8000c70 <UART_SetConfig+0x80>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8000c3a:	f7ff ffbb 	bl	8000bb4 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8000c3e:	4360      	muls	r0, r4
 8000c40:	686c      	ldr	r4, [r5, #4]
 8000c42:	6829      	ldr	r1, [r5, #0]
 8000c44:	0064      	lsls	r4, r4, #1
 8000c46:	fbb0 f0f4 	udiv	r0, r0, r4
 8000c4a:	2464      	movs	r4, #100	; 0x64
 8000c4c:	fbb0 f5f4 	udiv	r5, r0, r4
 8000c50:	fb04 0315 	mls	r3, r4, r5, r0
 8000c54:	00db      	lsls	r3, r3, #3
 8000c56:	3332      	adds	r3, #50	; 0x32
 8000c58:	fbb3 f3f4 	udiv	r3, r3, r4
 8000c5c:	f003 0207 	and.w	r2, r3, #7
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 8000c66:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8000c6a:	4413      	add	r3, r2
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8000c6c:	608b      	str	r3, [r1, #8]
 8000c6e:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8000c70:	f7ff ff90 	bl	8000b94 <HAL_RCC_GetPCLK1Freq>
 8000c74:	e7e3      	b.n	8000c3e <UART_SetConfig+0x4e>
    if((huart->Instance == USART1))
 8000c76:	429a      	cmp	r2, r3
 8000c78:	f04f 0419 	mov.w	r4, #25
 8000c7c:	d113      	bne.n	8000ca6 <UART_SetConfig+0xb6>
      pclk = HAL_RCC_GetPCLK2Freq();
 8000c7e:	f7ff ff99 	bl	8000bb4 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8000c82:	4360      	muls	r0, r4
 8000c84:	686c      	ldr	r4, [r5, #4]
 8000c86:	2264      	movs	r2, #100	; 0x64
 8000c88:	00a4      	lsls	r4, r4, #2
 8000c8a:	fbb0 f0f4 	udiv	r0, r0, r4
 8000c8e:	fbb0 f4f2 	udiv	r4, r0, r2
 8000c92:	fb02 0314 	mls	r3, r2, r4, r0
 8000c96:	011b      	lsls	r3, r3, #4
 8000c98:	3332      	adds	r3, #50	; 0x32
 8000c9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8000c9e:	6829      	ldr	r1, [r5, #0]
 8000ca0:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8000ca4:	e7e2      	b.n	8000c6c <UART_SetConfig+0x7c>
      pclk = HAL_RCC_GetPCLK1Freq();
 8000ca6:	f7ff ff75 	bl	8000b94 <HAL_RCC_GetPCLK1Freq>
 8000caa:	e7ea      	b.n	8000c82 <UART_SetConfig+0x92>
 8000cac:	40013800 	.word	0x40013800

08000cb0 <HAL_UART_Init>:
{
 8000cb0:	b510      	push	{r4, lr}
  if (huart == NULL)
 8000cb2:	4604      	mov	r4, r0
 8000cb4:	b340      	cbz	r0, 8000d08 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8000cb6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000cba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000cbe:	b91b      	cbnz	r3, 8000cc8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8000cc0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8000cc4:	f000 fa46 	bl	8001154 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8000cc8:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8000cca:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8000ccc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8000cd0:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8000cd2:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8000cd4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000cd8:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8000cda:	f7ff ff89 	bl	8000bf0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000cde:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000ce0:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000ce2:	691a      	ldr	r2, [r3, #16]
 8000ce4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000ce8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000cea:	695a      	ldr	r2, [r3, #20]
 8000cec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000cf0:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8000cf2:	68da      	ldr	r2, [r3, #12]
 8000cf4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000cf8:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8000cfa:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000cfc:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8000cfe:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8000d02:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8000d06:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000d08:	2001      	movs	r0, #1
}
 8000d0a:	bd10      	pop	{r4, pc}

08000d0c <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 8000d0c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000d10:	2b20      	cmp	r3, #32
 8000d12:	d118      	bne.n	8000d46 <HAL_UART_Transmit_IT+0x3a>
    if ((pData == NULL) || (Size == 0U))
 8000d14:	b1a9      	cbz	r1, 8000d42 <HAL_UART_Transmit_IT+0x36>
 8000d16:	b1a2      	cbz	r2, 8000d42 <HAL_UART_Transmit_IT+0x36>
    __HAL_LOCK(huart);
 8000d18:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d012      	beq.n	8000d46 <HAL_UART_Transmit_IT+0x3a>
    huart->TxXferCount = Size;
 8000d20:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->TxXferSize = Size;
 8000d22:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000d24:	2300      	movs	r3, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000d26:	2221      	movs	r2, #33	; 0x21
    huart->pTxBuffPtr = pData;
 8000d28:	6201      	str	r1, [r0, #32]
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8000d2a:	6801      	ldr	r1, [r0, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000d2c:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000d2e:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8000d32:	68ca      	ldr	r2, [r1, #12]
    __HAL_UNLOCK(huart);
 8000d34:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8000d38:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000d3c:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 8000d3e:	4618      	mov	r0, r3
 8000d40:	4770      	bx	lr
      return HAL_ERROR;
 8000d42:	2001      	movs	r0, #1
 8000d44:	4770      	bx	lr
    return HAL_BUSY;
 8000d46:	2002      	movs	r0, #2
}
 8000d48:	4770      	bx	lr

08000d4a <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8000d4a:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8000d4e:	2b20      	cmp	r3, #32
 8000d50:	d120      	bne.n	8000d94 <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 8000d52:	b1e9      	cbz	r1, 8000d90 <HAL_UART_Receive_IT+0x46>
 8000d54:	b1e2      	cbz	r2, 8000d90 <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 8000d56:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d01a      	beq.n	8000d94 <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 8000d5e:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 8000d60:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000d62:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8000d64:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000d66:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8000d68:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8000d6c:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 8000d6e:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8000d70:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 8000d72:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8000d76:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8000d7a:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8000d7c:	6951      	ldr	r1, [r2, #20]
    return HAL_OK;
 8000d7e:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8000d80:	f041 0101 	orr.w	r1, r1, #1
 8000d84:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8000d86:	68d1      	ldr	r1, [r2, #12]
 8000d88:	f041 0120 	orr.w	r1, r1, #32
 8000d8c:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 8000d8e:	4770      	bx	lr
      return HAL_ERROR;
 8000d90:	2001      	movs	r0, #1
 8000d92:	4770      	bx	lr
    return HAL_BUSY;
 8000d94:	2002      	movs	r0, #2
}
 8000d96:	4770      	bx	lr

08000d98 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8000d98:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8000d9c:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8000d9e:	2b22      	cmp	r3, #34	; 0x22
 8000da0:	d136      	bne.n	8000e10 <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000da2:	6883      	ldr	r3, [r0, #8]
 8000da4:	6901      	ldr	r1, [r0, #16]
 8000da6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000daa:	6802      	ldr	r2, [r0, #0]
 8000dac:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000dae:	d123      	bne.n	8000df8 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8000db0:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8000db2:	b9e9      	cbnz	r1, 8000df0 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8000db4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000db8:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8000dbc:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8000dbe:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8000dc0:	3c01      	subs	r4, #1
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8000dc6:	b98c      	cbnz	r4, 8000dec <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8000dc8:	6803      	ldr	r3, [r0, #0]
 8000dca:	68da      	ldr	r2, [r3, #12]
 8000dcc:	f022 0220 	bic.w	r2, r2, #32
 8000dd0:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8000dd2:	68da      	ldr	r2, [r3, #12]
 8000dd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000dd8:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8000dda:	695a      	ldr	r2, [r3, #20]
 8000ddc:	f022 0201 	bic.w	r2, r2, #1
 8000de0:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8000de2:	2320      	movs	r3, #32
 8000de4:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8000de8:	f000 f8ec 	bl	8000fc4 <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 8000dec:	2000      	movs	r0, #0
}
 8000dee:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8000df0:	b2d2      	uxtb	r2, r2
 8000df2:	f823 2b01 	strh.w	r2, [r3], #1
 8000df6:	e7e1      	b.n	8000dbc <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 8000df8:	b921      	cbnz	r1, 8000e04 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8000dfa:	1c59      	adds	r1, r3, #1
 8000dfc:	6852      	ldr	r2, [r2, #4]
 8000dfe:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8000e00:	701a      	strb	r2, [r3, #0]
 8000e02:	e7dc      	b.n	8000dbe <UART_Receive_IT+0x26>
 8000e04:	6852      	ldr	r2, [r2, #4]
 8000e06:	1c59      	adds	r1, r3, #1
 8000e08:	6281      	str	r1, [r0, #40]	; 0x28
 8000e0a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000e0e:	e7f7      	b.n	8000e00 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8000e10:	2002      	movs	r0, #2
 8000e12:	bd10      	pop	{r4, pc}

08000e14 <HAL_UART_ErrorCallback>:
 8000e14:	4770      	bx	lr
	...

08000e18 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8000e18:	6803      	ldr	r3, [r0, #0]
{
 8000e1a:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8000e1c:	681a      	ldr	r2, [r3, #0]
{
 8000e1e:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8000e20:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8000e22:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8000e24:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8000e26:	d107      	bne.n	8000e38 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8000e28:	0696      	lsls	r6, r2, #26
 8000e2a:	d55a      	bpl.n	8000ee2 <HAL_UART_IRQHandler+0xca>
 8000e2c:	068d      	lsls	r5, r1, #26
 8000e2e:	d558      	bpl.n	8000ee2 <HAL_UART_IRQHandler+0xca>
}
 8000e30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8000e34:	f7ff bfb0 	b.w	8000d98 <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8000e38:	f015 0501 	ands.w	r5, r5, #1
 8000e3c:	d102      	bne.n	8000e44 <HAL_UART_IRQHandler+0x2c>
 8000e3e:	f411 7f90 	tst.w	r1, #288	; 0x120
 8000e42:	d04e      	beq.n	8000ee2 <HAL_UART_IRQHandler+0xca>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8000e44:	07d3      	lsls	r3, r2, #31
 8000e46:	d505      	bpl.n	8000e54 <HAL_UART_IRQHandler+0x3c>
 8000e48:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8000e4a:	bf42      	ittt	mi
 8000e4c:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8000e4e:	f043 0301 	orrmi.w	r3, r3, #1
 8000e52:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8000e54:	0750      	lsls	r0, r2, #29
 8000e56:	d504      	bpl.n	8000e62 <HAL_UART_IRQHandler+0x4a>
 8000e58:	b11d      	cbz	r5, 8000e62 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8000e5a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000e5c:	f043 0302 	orr.w	r3, r3, #2
 8000e60:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8000e62:	0793      	lsls	r3, r2, #30
 8000e64:	d504      	bpl.n	8000e70 <HAL_UART_IRQHandler+0x58>
 8000e66:	b11d      	cbz	r5, 8000e70 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8000e68:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000e6a:	f043 0304 	orr.w	r3, r3, #4
 8000e6e:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8000e70:	0716      	lsls	r6, r2, #28
 8000e72:	d504      	bpl.n	8000e7e <HAL_UART_IRQHandler+0x66>
 8000e74:	b11d      	cbz	r5, 8000e7e <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8000e76:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000e78:	f043 0308 	orr.w	r3, r3, #8
 8000e7c:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8000e7e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d066      	beq.n	8000f52 <HAL_UART_IRQHandler+0x13a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8000e84:	0695      	lsls	r5, r2, #26
 8000e86:	d504      	bpl.n	8000e92 <HAL_UART_IRQHandler+0x7a>
 8000e88:	0688      	lsls	r0, r1, #26
 8000e8a:	d502      	bpl.n	8000e92 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	f7ff ff83 	bl	8000d98 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8000e92:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8000e94:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8000e96:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8000e98:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000e9a:	0711      	lsls	r1, r2, #28
 8000e9c:	d402      	bmi.n	8000ea4 <HAL_UART_IRQHandler+0x8c>
 8000e9e:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8000ea2:	d01a      	beq.n	8000eda <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8000ea4:	f7ff fe96 	bl	8000bd4 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8000ea8:	6823      	ldr	r3, [r4, #0]
 8000eaa:	695a      	ldr	r2, [r3, #20]
 8000eac:	0652      	lsls	r2, r2, #25
 8000eae:	d510      	bpl.n	8000ed2 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8000eb0:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8000eb2:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8000eb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000eb8:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8000eba:	b150      	cbz	r0, 8000ed2 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8000ebc:	4b25      	ldr	r3, [pc, #148]	; (8000f54 <HAL_UART_IRQHandler+0x13c>)
 8000ebe:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8000ec0:	f7ff fa16 	bl	80002f0 <HAL_DMA_Abort_IT>
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d044      	beq.n	8000f52 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8000ec8:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8000eca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8000ece:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000ed0:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8000ed2:	4620      	mov	r0, r4
 8000ed4:	f7ff ff9e 	bl	8000e14 <HAL_UART_ErrorCallback>
 8000ed8:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8000eda:	f7ff ff9b 	bl	8000e14 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000ede:	63e5      	str	r5, [r4, #60]	; 0x3c
 8000ee0:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8000ee2:	0616      	lsls	r6, r2, #24
 8000ee4:	d527      	bpl.n	8000f36 <HAL_UART_IRQHandler+0x11e>
 8000ee6:	060d      	lsls	r5, r1, #24
 8000ee8:	d525      	bpl.n	8000f36 <HAL_UART_IRQHandler+0x11e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8000eea:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8000eee:	2a21      	cmp	r2, #33	; 0x21
 8000ef0:	d12f      	bne.n	8000f52 <HAL_UART_IRQHandler+0x13a>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000ef2:	68a2      	ldr	r2, [r4, #8]
 8000ef4:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8000ef8:	6a22      	ldr	r2, [r4, #32]
 8000efa:	d117      	bne.n	8000f2c <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8000efc:	8811      	ldrh	r1, [r2, #0]
 8000efe:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8000f02:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8000f04:	6921      	ldr	r1, [r4, #16]
 8000f06:	b979      	cbnz	r1, 8000f28 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8000f08:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8000f0a:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8000f0c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8000f0e:	3a01      	subs	r2, #1
 8000f10:	b292      	uxth	r2, r2
 8000f12:	84e2      	strh	r2, [r4, #38]	; 0x26
 8000f14:	b9ea      	cbnz	r2, 8000f52 <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8000f16:	68da      	ldr	r2, [r3, #12]
 8000f18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f1c:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8000f1e:	68da      	ldr	r2, [r3, #12]
 8000f20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8000f28:	3201      	adds	r2, #1
 8000f2a:	e7ee      	b.n	8000f0a <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8000f2c:	1c51      	adds	r1, r2, #1
 8000f2e:	6221      	str	r1, [r4, #32]
 8000f30:	7812      	ldrb	r2, [r2, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	e7ea      	b.n	8000f0c <HAL_UART_IRQHandler+0xf4>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8000f36:	0650      	lsls	r0, r2, #25
 8000f38:	d50b      	bpl.n	8000f52 <HAL_UART_IRQHandler+0x13a>
 8000f3a:	064a      	lsls	r2, r1, #25
 8000f3c:	d509      	bpl.n	8000f52 <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8000f3e:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8000f40:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8000f42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000f46:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8000f48:	2320      	movs	r3, #32
 8000f4a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8000f4e:	f000 f833 	bl	8000fb8 <HAL_UART_TxCpltCallback>
 8000f52:	bd70      	pop	{r4, r5, r6, pc}
 8000f54:	08000f59 	.word	0x08000f59

08000f58 <UART_DMAAbortOnError>:
{
 8000f58:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8000f5a:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000f5c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8000f5e:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8000f60:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8000f62:	f7ff ff57 	bl	8000e14 <HAL_UART_ErrorCallback>
 8000f66:	bd08      	pop	{r3, pc}

08000f68 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f68:	b510      	push	{r4, lr}
 8000f6a:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	2214      	movs	r2, #20
 8000f6e:	2100      	movs	r1, #0
 8000f70:	a801      	add	r0, sp, #4
 8000f72:	f000 f973 	bl	800125c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f76:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <MX_GPIO_Init+0x48>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000f78:	4c0e      	ldr	r4, [pc, #56]	; (8000fb4 <MX_GPIO_Init+0x4c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7a:	69da      	ldr	r2, [r3, #28]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000f7c:	4620      	mov	r0, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7e:	f042 0201 	orr.w	r2, r2, #1
 8000f82:	61da      	str	r2, [r3, #28]
 8000f84:	69db      	ldr	r3, [r3, #28]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000f86:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f88:	f003 0301 	and.w	r3, r3, #1
 8000f8c:	9300      	str	r3, [sp, #0]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000f8e:	2120      	movs	r1, #32
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f90:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000f92:	f7ff faa5 	bl	80004e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f96:	2320      	movs	r3, #32
 8000f98:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa0:	a901      	add	r1, sp, #4
 8000fa2:	4620      	mov	r0, r4
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa6:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa8:	f7ff f9c8 	bl	800033c <HAL_GPIO_Init>

}
 8000fac:	b006      	add	sp, #24
 8000fae:	bd10      	pop	{r4, pc}
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	40020000 	.word	0x40020000

08000fb8 <HAL_UART_TxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000fb8:	2120      	movs	r1, #32
 8000fba:	4801      	ldr	r0, [pc, #4]	; (8000fc0 <HAL_UART_TxCpltCallback+0x8>)
 8000fbc:	f7ff ba95 	b.w	80004ea <HAL_GPIO_TogglePin>
 8000fc0:	40020000 	.word	0x40020000

08000fc4 <HAL_UART_RxCpltCallback>:
}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000fc4:	4770      	bx	lr
	...

08000fc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc8:	b530      	push	{r4, r5, lr}
 8000fca:	b093      	sub	sp, #76	; 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fcc:	2234      	movs	r2, #52	; 0x34
 8000fce:	2100      	movs	r1, #0
 8000fd0:	a805      	add	r0, sp, #20
 8000fd2:	f000 f943 	bl	800125c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	2214      	movs	r2, #20
 8000fda:	4668      	mov	r0, sp
 8000fdc:	f000 f93e 	bl	800125c <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fe0:	4a0e      	ldr	r2, [pc, #56]	; (800101c <SystemClock_Config+0x54>)
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fe2:	2400      	movs	r4, #0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fe4:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fe6:	2501      	movs	r5, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fe8:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000fec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ff0:	6013      	str	r3, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ff6:	2310      	movs	r3, #16
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ff8:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ffa:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ffc:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ffe:	940e      	str	r4, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001000:	f7ff faba 	bl	8000578 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001004:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001006:	4621      	mov	r1, r4
 8001008:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800100a:	e88d 0028 	stmia.w	sp, {r3, r5}
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800100e:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001010:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001012:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001014:	f7ff fcfc 	bl	8000a10 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001018:	b013      	add	sp, #76	; 0x4c
 800101a:	bd30      	pop	{r4, r5, pc}
 800101c:	40007000 	.word	0x40007000

08001020 <main>:
{
 8001020:	b530      	push	{r4, r5, lr}
 8001022:	b09b      	sub	sp, #108	; 0x6c
  HAL_Init();
 8001024:	f7ff f8d8 	bl	80001d8 <HAL_Init>
  SystemClock_Config();
 8001028:	f7ff ffce 	bl	8000fc8 <SystemClock_Config>
  MX_GPIO_Init();
 800102c:	f7ff ff9c 	bl	8000f68 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001030:	f000 f872 	bl	8001118 <MX_USART2_UART_Init>
	  HAL_UART_Receive_IT(&huart2,pData, 8);
 8001034:	4d0a      	ldr	r5, [pc, #40]	; (8001060 <main+0x40>)
	  while(!(USART2->SR & 0x0020));
 8001036:	4c0b      	ldr	r4, [pc, #44]	; (8001064 <main+0x44>)
	  HAL_UART_Receive_IT(&huart2,pData, 8);
 8001038:	2208      	movs	r2, #8
 800103a:	a901      	add	r1, sp, #4
 800103c:	4628      	mov	r0, r5
 800103e:	f7ff fe84 	bl	8000d4a <HAL_UART_Receive_IT>
	  while(!(USART2->SR & 0x0020));
 8001042:	6823      	ldr	r3, [r4, #0]
 8001044:	069a      	lsls	r2, r3, #26
 8001046:	d5fc      	bpl.n	8001042 <main+0x22>
	  HAL_UART_Transmit_IT(&huart2,pData, strlen(pData));
 8001048:	a801      	add	r0, sp, #4
 800104a:	f7ff f897 	bl	800017c <strlen>
 800104e:	a901      	add	r1, sp, #4
 8001050:	b282      	uxth	r2, r0
 8001052:	4628      	mov	r0, r5
 8001054:	f7ff fe5a 	bl	8000d0c <HAL_UART_Transmit_IT>
	  while(!(USART2->SR & 0x0080));
 8001058:	6823      	ldr	r3, [r4, #0]
 800105a:	061b      	lsls	r3, r3, #24
 800105c:	d5fc      	bpl.n	8001058 <main+0x38>
 800105e:	e7eb      	b.n	8001038 <main+0x18>
 8001060:	2000002c 	.word	0x2000002c
 8001064:	40004400 	.word	0x40004400

08001068 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001068:	4770      	bx	lr
	...

0800106c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800106c:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <HAL_MspInit+0x40>)
{
 800106e:	b084      	sub	sp, #16
  __HAL_RCC_COMP_CLK_ENABLE();
 8001070:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001072:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001076:	625a      	str	r2, [r3, #36]	; 0x24
 8001078:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800107a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800107e:	9201      	str	r2, [sp, #4]
 8001080:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001082:	6a1a      	ldr	r2, [r3, #32]
 8001084:	f042 0201 	orr.w	r2, r2, #1
 8001088:	621a      	str	r2, [r3, #32]
 800108a:	6a1a      	ldr	r2, [r3, #32]
 800108c:	f002 0201 	and.w	r2, r2, #1
 8001090:	9202      	str	r2, [sp, #8]
 8001092:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001094:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001096:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800109a:	625a      	str	r2, [r3, #36]	; 0x24
 800109c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800109e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a2:	9303      	str	r3, [sp, #12]
 80010a4:	9b03      	ldr	r3, [sp, #12]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010a6:	b004      	add	sp, #16
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	40023800 	.word	0x40023800

080010b0 <NMI_Handler>:
 80010b0:	4770      	bx	lr

080010b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010b2:	e7fe      	b.n	80010b2 <HardFault_Handler>

080010b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010b4:	e7fe      	b.n	80010b4 <MemManage_Handler>

080010b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010b6:	e7fe      	b.n	80010b6 <BusFault_Handler>

080010b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010b8:	e7fe      	b.n	80010b8 <UsageFault_Handler>

080010ba <SVC_Handler>:
 80010ba:	4770      	bx	lr

080010bc <DebugMon_Handler>:
 80010bc:	4770      	bx	lr

080010be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010be:	4770      	bx	lr

080010c0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010c0:	f7ff b89a 	b.w	80001f8 <HAL_IncTick>

080010c4 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80010c4:	4801      	ldr	r0, [pc, #4]	; (80010cc <USART2_IRQHandler+0x8>)
 80010c6:	f7ff bea7 	b.w	8000e18 <HAL_UART_IRQHandler>
 80010ca:	bf00      	nop
 80010cc:	2000002c 	.word	0x2000002c

080010d0 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 80010d0:	4b0e      	ldr	r3, [pc, #56]	; (800110c <SystemInit+0x3c>)
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80010d8:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 80010da:	6899      	ldr	r1, [r3, #8]
 80010dc:	4a0c      	ldr	r2, [pc, #48]	; (8001110 <SystemInit+0x40>)
 80010de:	400a      	ands	r2, r1
 80010e0:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 80010e8:	f022 1201 	bic.w	r2, r2, #65537	; 0x10001
 80010ec:	601a      	str	r2, [r3, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80010f4:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 80010f6:	689a      	ldr	r2, [r3, #8]
 80010f8:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 80010fc:	609a      	str	r2, [r3, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 80010fe:	2200      	movs	r2, #0
 8001100:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001102:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001106:	4b03      	ldr	r3, [pc, #12]	; (8001114 <SystemInit+0x44>)
 8001108:	609a      	str	r2, [r3, #8]
 800110a:	4770      	bx	lr
 800110c:	40023800 	.word	0x40023800
 8001110:	88ffc00c 	.word	0x88ffc00c
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001118:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 19200 ;
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800111a:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
 800111e:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
  huart2.Instance = USART2;
 8001122:	480a      	ldr	r0, [pc, #40]	; (800114c <MX_USART2_UART_Init+0x34>)
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001124:	4a0a      	ldr	r2, [pc, #40]	; (8001150 <MX_USART2_UART_Init+0x38>)
 8001126:	e880 100c 	stmia.w	r0, {r2, r3, ip}
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_EVEN;
 800112a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  huart2.Init.StopBits = UART_STOPBITS_1;
 800112e:	2300      	movs	r3, #0
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001130:	6102      	str	r2, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001132:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001134:	60c3      	str	r3, [r0, #12]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001136:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001138:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800113a:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800113c:	f7ff fdb8 	bl	8000cb0 <HAL_UART_Init>
 8001140:	b118      	cbz	r0, 800114a <MX_USART2_UART_Init+0x32>
  {
    Error_Handler();
  }

}
 8001142:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001146:	f7ff bf8f 	b.w	8001068 <Error_Handler>
 800114a:	bd08      	pop	{r3, pc}
 800114c:	2000002c 	.word	0x2000002c
 8001150:	40004400 	.word	0x40004400

08001154 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001154:	b510      	push	{r4, lr}
 8001156:	4604      	mov	r4, r0
 8001158:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115a:	2214      	movs	r2, #20
 800115c:	2100      	movs	r1, #0
 800115e:	a803      	add	r0, sp, #12
 8001160:	f000 f87c 	bl	800125c <memset>
  if(uartHandle->Instance==USART2)
 8001164:	6822      	ldr	r2, [r4, #0]
 8001166:	4b16      	ldr	r3, [pc, #88]	; (80011c0 <HAL_UART_MspInit+0x6c>)
 8001168:	429a      	cmp	r2, r3
 800116a:	d127      	bne.n	80011bc <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800116c:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8001170:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001172:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 8001174:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001178:	625a      	str	r2, [r3, #36]	; 0x24
 800117a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117c:	4811      	ldr	r0, [pc, #68]	; (80011c4 <HAL_UART_MspInit+0x70>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800117e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001182:	9201      	str	r2, [sp, #4]
 8001184:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001186:	69da      	ldr	r2, [r3, #28]
 8001188:	f042 0201 	orr.w	r2, r2, #1
 800118c:	61da      	str	r2, [r3, #28]
 800118e:	69db      	ldr	r3, [r3, #28]
 8001190:	f003 0301 	and.w	r3, r3, #1
 8001194:	9302      	str	r3, [sp, #8]
 8001196:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001198:	230c      	movs	r3, #12
 800119a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119c:	2302      	movs	r3, #2
 800119e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a0:	2303      	movs	r3, #3
 80011a2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011a4:	2307      	movs	r3, #7
 80011a6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a8:	f7ff f8c8 	bl	800033c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80011ac:	2200      	movs	r2, #0
 80011ae:	2026      	movs	r0, #38	; 0x26
 80011b0:	4611      	mov	r1, r2
 80011b2:	f7ff f845 	bl	8000240 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011b6:	2026      	movs	r0, #38	; 0x26
 80011b8:	f7ff f876 	bl	80002a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80011bc:	b008      	add	sp, #32
 80011be:	bd10      	pop	{r4, pc}
 80011c0:	40004400 	.word	0x40004400
 80011c4:	40020000 	.word	0x40020000

080011c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80011c8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80011ca:	e003      	b.n	80011d4 <LoopCopyDataInit>

080011cc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80011cc:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80011ce:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80011d0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80011d2:	3104      	adds	r1, #4

080011d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80011d4:	480a      	ldr	r0, [pc, #40]	; (8001200 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80011d6:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80011d8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80011da:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80011dc:	d3f6      	bcc.n	80011cc <CopyDataInit>
  ldr r2, =_sbss
 80011de:	4a0a      	ldr	r2, [pc, #40]	; (8001208 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80011e0:	e002      	b.n	80011e8 <LoopFillZerobss>

080011e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80011e2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80011e4:	f842 3b04 	str.w	r3, [r2], #4

080011e8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80011e8:	4b08      	ldr	r3, [pc, #32]	; (800120c <LoopFillZerobss+0x24>)
  cmp r2, r3
 80011ea:	429a      	cmp	r2, r3
  bcc FillZerobss
 80011ec:	d3f9      	bcc.n	80011e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011ee:	f7ff ff6f 	bl	80010d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011f2:	f000 f80f 	bl	8001214 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011f6:	f7ff ff13 	bl	8001020 <main>
  bx lr
 80011fa:	4770      	bx	lr
  ldr r3, =_sidata
 80011fc:	080012b0 	.word	0x080012b0
  ldr r0, =_sdata
 8001200:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001204:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8001208:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 800120c:	2000006c 	.word	0x2000006c

08001210 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001210:	e7fe      	b.n	8001210 <ADC1_IRQHandler>
	...

08001214 <__libc_init_array>:
 8001214:	b570      	push	{r4, r5, r6, lr}
 8001216:	2500      	movs	r5, #0
 8001218:	4e0c      	ldr	r6, [pc, #48]	; (800124c <__libc_init_array+0x38>)
 800121a:	4c0d      	ldr	r4, [pc, #52]	; (8001250 <__libc_init_array+0x3c>)
 800121c:	1ba4      	subs	r4, r4, r6
 800121e:	10a4      	asrs	r4, r4, #2
 8001220:	42a5      	cmp	r5, r4
 8001222:	d109      	bne.n	8001238 <__libc_init_array+0x24>
 8001224:	f000 f822 	bl	800126c <_init>
 8001228:	2500      	movs	r5, #0
 800122a:	4e0a      	ldr	r6, [pc, #40]	; (8001254 <__libc_init_array+0x40>)
 800122c:	4c0a      	ldr	r4, [pc, #40]	; (8001258 <__libc_init_array+0x44>)
 800122e:	1ba4      	subs	r4, r4, r6
 8001230:	10a4      	asrs	r4, r4, #2
 8001232:	42a5      	cmp	r5, r4
 8001234:	d105      	bne.n	8001242 <__libc_init_array+0x2e>
 8001236:	bd70      	pop	{r4, r5, r6, pc}
 8001238:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800123c:	4798      	blx	r3
 800123e:	3501      	adds	r5, #1
 8001240:	e7ee      	b.n	8001220 <__libc_init_array+0xc>
 8001242:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001246:	4798      	blx	r3
 8001248:	3501      	adds	r5, #1
 800124a:	e7f2      	b.n	8001232 <__libc_init_array+0x1e>
 800124c:	080012a8 	.word	0x080012a8
 8001250:	080012a8 	.word	0x080012a8
 8001254:	080012a8 	.word	0x080012a8
 8001258:	080012ac 	.word	0x080012ac

0800125c <memset>:
 800125c:	4603      	mov	r3, r0
 800125e:	4402      	add	r2, r0
 8001260:	4293      	cmp	r3, r2
 8001262:	d100      	bne.n	8001266 <memset+0xa>
 8001264:	4770      	bx	lr
 8001266:	f803 1b01 	strb.w	r1, [r3], #1
 800126a:	e7f9      	b.n	8001260 <memset+0x4>

0800126c <_init>:
 800126c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800126e:	bf00      	nop
 8001270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001272:	bc08      	pop	{r3}
 8001274:	469e      	mov	lr, r3
 8001276:	4770      	bx	lr

08001278 <_fini>:
 8001278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800127a:	bf00      	nop
 800127c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800127e:	bc08      	pop	{r3}
 8001280:	469e      	mov	lr, r3
 8001282:	4770      	bx	lr
