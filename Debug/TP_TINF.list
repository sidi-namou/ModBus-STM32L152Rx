
TP_TINF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001498  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080015d4  080015d4  000115d4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080015f8  080015f8  000115f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080015fc  080015fc  000115fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08001600  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000006c  2000000c  0800160c  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000078  0800160c  00020078  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00007e25  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001d2e  00000000  00000000  00027e5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003255  00000000  00000000  00029b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000638  00000000  00000000  0002cde0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000760  00000000  00000000  0002d418  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000385b  00000000  00000000  0002db78  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002336  00000000  00000000  000313d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00033709  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000f14  00000000  00000000  00033788  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000000c 	.word	0x2000000c
 8000158:	00000000 	.word	0x00000000
 800015c:	080015bc 	.word	0x080015bc

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000010 	.word	0x20000010
 8000178:	080015bc 	.word	0x080015bc

0800017c <MBMESN_serialCommWrite>:
	return MBMESN_OK;
}

MBMESN_errorstatus_t MBMESN_serialCommWrite(uint8_t* dataToSend,uint32_t lengthOfData){
	HAL_StatusTypeDef ret=HAL_ERROR;
	state=Empty;
 800017c:	2200      	movs	r2, #0
MBMESN_errorstatus_t MBMESN_serialCommWrite(uint8_t* dataToSend,uint32_t lengthOfData){
 800017e:	b510      	push	{r4, lr}
	state=Empty;
 8000180:	4c08      	ldr	r4, [pc, #32]	; (80001a4 <MBMESN_serialCommWrite+0x28>)
 8000182:	6022      	str	r2, [r4, #0]

	if(lengthOfData>0){
 8000184:	b909      	cbnz	r1, 800018a <MBMESN_serialCommWrite+0xe>
		ret = HAL_UART_Transmit_IT(&huart2,dataToSend, lengthOfData);
		while(state!=Transmitter_Done);
	}

	if(ret==HAL_OK)return MBMESN_OK;
	else if(ret==HAL_ERROR)return MBMESN_ERROR;
 8000186:	2001      	movs	r0, #1
 8000188:	bd10      	pop	{r4, pc}
		ret = HAL_UART_Transmit_IT(&huart2,dataToSend, lengthOfData);
 800018a:	b28a      	uxth	r2, r1
 800018c:	4601      	mov	r1, r0
 800018e:	4806      	ldr	r0, [pc, #24]	; (80001a8 <MBMESN_serialCommWrite+0x2c>)
 8000190:	f000 ff2e 	bl	8000ff0 <HAL_UART_Transmit_IT>
		while(state!=Transmitter_Done);
 8000194:	6823      	ldr	r3, [r4, #0]
 8000196:	2b02      	cmp	r3, #2
 8000198:	d1fc      	bne.n	8000194 <MBMESN_serialCommWrite+0x18>
	if(ret==HAL_OK)return MBMESN_OK;
 800019a:	b110      	cbz	r0, 80001a2 <MBMESN_serialCommWrite+0x26>
	else if(ret==HAL_ERROR)return MBMESN_ERROR;
 800019c:	2801      	cmp	r0, #1
 800019e:	d0f2      	beq.n	8000186 <MBMESN_serialCommWrite+0xa>
	else return MBMESN_TIMEOUT;
 80001a0:	4618      	mov	r0, r3
}
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000028 	.word	0x20000028
 80001a8:	20000038 	.word	0x20000038

080001ac <MBMESN_serialCommRead>:


	HAL_StatusTypeDef ret=HAL_ERROR;
	uint32_t compteur,lCount=0 , nbByte=1,TByte=0;

	*totalBytesRead=0;
 80001ac:	2300      	movs	r3, #0
MBMESN_errorstatus_t MBMESN_serialCommRead(uint8_t * data, uint16_t lengthOfData, uint32_t * totalBytesRead){
 80001ae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	 state=Empty;
 80001b2:	4d21      	ldr	r5, [pc, #132]	; (8000238 <MBMESN_serialCommRead+0x8c>)
	*totalBytesRead=0;
 80001b4:	6013      	str	r3, [r2, #0]
MBMESN_errorstatus_t MBMESN_serialCommRead(uint8_t * data, uint16_t lengthOfData, uint32_t * totalBytesRead){
 80001b6:	4680      	mov	r8, r0
 80001b8:	4689      	mov	r9, r1
 80001ba:	4692      	mov	sl, r2
	// On doit attendre le début de le transmission


	 HAL_UART_Receive_IT(&huart2,data,1);
 80001bc:	4601      	mov	r1, r0
 80001be:	2201      	movs	r2, #1
 80001c0:	481e      	ldr	r0, [pc, #120]	; (800023c <MBMESN_serialCommRead+0x90>)
	 state=Empty;
 80001c2:	602b      	str	r3, [r5, #0]
	 HAL_UART_Receive_IT(&huart2,data,1);
 80001c4:	f000 ff33 	bl	800102e <HAL_UART_Receive_IT>
	 while(state!=Receiver_Done){
 80001c8:	682c      	ldr	r4, [r5, #0]
 80001ca:	2c01      	cmp	r4, #1
 80001cc:	d10d      	bne.n	80001ea <MBMESN_serialCommRead+0x3e>
 80001ce:	46a3      	mov	fp, r4
 80001d0:	4626      	mov	r6, r4
while(nbByte<lengthOfData){



	 state=Empty;
		  	  HAL_UART_Receive_IT(&huart2,data+nbByte,1);// octet par octet
 80001d2:	4f1a      	ldr	r7, [pc, #104]	; (800023c <MBMESN_serialCommRead+0x90>)
while(nbByte<lengthOfData){
 80001d4:	45cb      	cmp	fp, r9
 80001d6:	d30a      	bcc.n	80001ee <MBMESN_serialCommRead+0x42>
	*totalBytesRead=TByte;


		if(ret==HAL_OK)return MBMESN_OK;
		else if(ret == HAL_ERROR)return MBMESN_ERROR;
		else return MBMESN_TIMEOUT;
 80001d8:	2e01      	cmp	r6, #1
 80001da:	bf0c      	ite	eq
 80001dc:	2001      	moveq	r0, #1
 80001de:	2002      	movne	r0, #2
	*totalBytesRead=TByte;
 80001e0:	f8ca 4000 	str.w	r4, [sl]

}
 80001e4:	b003      	add	sp, #12
 80001e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 __NOP();
 80001ea:	bf00      	nop
 80001ec:	e7ec      	b.n	80001c8 <MBMESN_serialCommRead+0x1c>
	 state=Empty;
 80001ee:	2300      	movs	r3, #0
		  	  HAL_UART_Receive_IT(&huart2,data+nbByte,1);// octet par octet
 80001f0:	2201      	movs	r2, #1
 80001f2:	eb08 010b 	add.w	r1, r8, fp
 80001f6:	4638      	mov	r0, r7
	 state=Empty;
 80001f8:	602b      	str	r3, [r5, #0]
		  	  HAL_UART_Receive_IT(&huart2,data+nbByte,1);// octet par octet
 80001fa:	f000 ff18 	bl	800102e <HAL_UART_Receive_IT>
		  	compteur = HAL_GetTick();
 80001fe:	f000 f979 	bl	80004f4 <HAL_GetTick>
 8000202:	4602      	mov	r2, r0
		  	  while((compteur - lCount < 3)&& (state!=Receiver_Done)){	// Pour 2ms
 8000204:	1a80      	subs	r0, r0, r2
 8000206:	2802      	cmp	r0, #2
 8000208:	d80e      	bhi.n	8000228 <MBMESN_serialCommRead+0x7c>
 800020a:	6829      	ldr	r1, [r5, #0]
 800020c:	2901      	cmp	r1, #1
 800020e:	d106      	bne.n	800021e <MBMESN_serialCommRead+0x72>
	if(state!=Receiver_Done) TByte--;
 8000210:	682a      	ldr	r2, [r5, #0]
		  		nbByte++;
 8000212:	f10b 0b01 	add.w	fp, fp, #1
	if(state!=Receiver_Done) TByte--;
 8000216:	2a01      	cmp	r2, #1
		  		  TByte++;
 8000218:	bf08      	it	eq
 800021a:	3401      	addeq	r4, #1
 800021c:	e7da      	b.n	80001d4 <MBMESN_serialCommRead+0x28>
 800021e:	9201      	str	r2, [sp, #4]
		  		  compteur = HAL_GetTick();
 8000220:	f000 f968 	bl	80004f4 <HAL_GetTick>
 8000224:	9a01      	ldr	r2, [sp, #4]
 8000226:	e7ed      	b.n	8000204 <MBMESN_serialCommRead+0x58>
					HAL_UART_AbortReceive_IT(&huart2);
 8000228:	4638      	mov	r0, r7
 800022a:	f001 f80f 	bl	800124c <HAL_UART_AbortReceive_IT>
						  		while(state!=Abort_Receive_Done);
 800022e:	682e      	ldr	r6, [r5, #0]
 8000230:	2e03      	cmp	r6, #3
 8000232:	d1fc      	bne.n	800022e <MBMESN_serialCommRead+0x82>
 8000234:	46cb      	mov	fp, r9
 8000236:	e7eb      	b.n	8000210 <MBMESN_serialCommRead+0x64>
 8000238:	20000028 	.word	0x20000028
 800023c:	20000038 	.word	0x20000038

08000240 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000240:	b508      	push	{r3, lr}
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000242:	2120      	movs	r1, #32
 8000244:	4803      	ldr	r0, [pc, #12]	; (8000254 <HAL_UART_TxCpltCallback+0x14>)
 8000246:	f000 fac2 	bl	80007ce <HAL_GPIO_TogglePin>
	state=Transmitter_Done;
 800024a:	2202      	movs	r2, #2
 800024c:	4b02      	ldr	r3, [pc, #8]	; (8000258 <HAL_UART_TxCpltCallback+0x18>)
 800024e:	601a      	str	r2, [r3, #0]
 8000250:	bd08      	pop	{r3, pc}
 8000252:	bf00      	nop
 8000254:	40020000 	.word	0x40020000
 8000258:	20000028 	.word	0x20000028

0800025c <HAL_UART_RxCpltCallback>:
}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
state=Receiver_Done;
 800025c:	2201      	movs	r2, #1
 800025e:	4b01      	ldr	r3, [pc, #4]	; (8000264 <HAL_UART_RxCpltCallback+0x8>)
 8000260:	601a      	str	r2, [r3, #0]
 8000262:	4770      	bx	lr
 8000264:	20000028 	.word	0x20000028

08000268 <HAL_UART_AbortReceiveCpltCallback>:
}
HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart){
	state=Abort_Receive_Done;
 8000268:	2203      	movs	r2, #3
 800026a:	4b01      	ldr	r3, [pc, #4]	; (8000270 <HAL_UART_AbortReceiveCpltCallback+0x8>)
 800026c:	601a      	str	r2, [r3, #0]
 800026e:	4770      	bx	lr
 8000270:	20000028 	.word	0x20000028

08000274 <MBMESN_computeCRC>:
}
static uint8_t MBMESN_VeriCRC(uint16_t crcC, uint16_t crcR){
	if(crcC != crcR)return 0;
	else return 1;
}
static uint16_t MBMESN_computeCRC(uint8_t * frame, uint16_t frameLengthWoCRC){
 8000274:	b530      	push	{r4, r5, lr}
uint16_t crc = 0xFFFF;		// Initialisation du crc16 modbus-rtu

  for (int pos = 0; pos < frameLengthWoCRC; pos++)
 8000276:	4602      	mov	r2, r0
uint16_t crc = 0xFFFF;		// Initialisation du crc16 modbus-rtu
 8000278:	f64f 73ff 	movw	r3, #65535	; 0xffff
    crc ^= (uint16_t)frame[pos];          // XOR entre crc et l'octet suivant

    for (int i = 8; i != 0; i--) {    // une boucle pour chaque bit
      if ((crc & 0x0001) != 0) {      // si LSB est égal à 1
        crc >>= 1;                    // decalage à droite et xor avec 0xA001
        crc ^= 0xA001;
 800027c:	f24a 0501 	movw	r5, #40961	; 0xa001
  for (int pos = 0; pos < frameLengthWoCRC; pos++)
 8000280:	1a14      	subs	r4, r2, r0
 8000282:	42a1      	cmp	r1, r4
 8000284:	dc01      	bgt.n	800028a <MBMESN_computeCRC+0x16>
        crc >>= 1;                    // On fait seulement un decalage à droite
    }
  }
  // On retourne la valeur du crc
  return crc;
}
 8000286:	4618      	mov	r0, r3
 8000288:	bd30      	pop	{r4, r5, pc}
    crc ^= (uint16_t)frame[pos];          // XOR entre crc et l'octet suivant
 800028a:	f812 4b01 	ldrb.w	r4, [r2], #1
 800028e:	4063      	eors	r3, r4
 8000290:	2408      	movs	r4, #8
      if ((crc & 0x0001) != 0) {      // si LSB est égal à 1
 8000292:	f013 0f01 	tst.w	r3, #1
 8000296:	ea4f 0353 	mov.w	r3, r3, lsr #1
        crc >>= 1;                    // decalage à droite et xor avec 0xA001
 800029a:	b29b      	uxth	r3, r3
        crc ^= 0xA001;
 800029c:	bf18      	it	ne
 800029e:	406b      	eorne	r3, r5
    for (int i = 8; i != 0; i--) {    // une boucle pour chaque bit
 80002a0:	3c01      	subs	r4, #1
 80002a2:	d1f6      	bne.n	8000292 <MBMESN_computeCRC+0x1e>
 80002a4:	e7ec      	b.n	8000280 <MBMESN_computeCRC+0xc>
	...

080002a8 <HandleMBRequest>:



/* This function receives a Modbus RTU frame, checks its addresse and integrity and extract the PDU (function code and parameters) */
MBMESN_errorstatus_t HandleMBRequest(uint8_t * requestFrame, uint16_t lengtOfRequest, uint8_t * modbusPDU, uint16_t * pLengthOfPDU){
 80002a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002aa:	4604      	mov	r4, r0
 80002ac:	460e      	mov	r6, r1

	uint16_t crcC,crcR;
	uint8_t slaveAdress;

	// On calcul le crc du trame sans les octets du crc
	crcC = MBMESN_computeCRC(requestFrame, lengtOfRequest -2);
 80002ae:	3902      	subs	r1, #2
 80002b0:	b289      	uxth	r1, r1
MBMESN_errorstatus_t HandleMBRequest(uint8_t * requestFrame, uint16_t lengtOfRequest, uint8_t * modbusPDU, uint16_t * pLengthOfPDU){
 80002b2:	4615      	mov	r5, r2
 80002b4:	461f      	mov	r7, r3
	crcC = MBMESN_computeCRC(requestFrame, lengtOfRequest -2);
 80002b6:	f7ff ffdd 	bl	8000274 <MBMESN_computeCRC>
	// On recupere les octets du CRC du trame
	crcR = (uint16_t)requestFrame[lengtOfRequest -1];
 80002ba:	4426      	add	r6, r4
 80002bc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
	crcR <<=8;
	crcR |= (uint16_t )requestFrame[lengtOfRequest -2];
 80002c0:	f816 3c02 	ldrb.w	r3, [r6, #-2]
	if(crcC != crcR)return 0;
 80002c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80002c8:	4298      	cmp	r0, r3
 80002ca:	d125      	bne.n	8000318 <HandleMBRequest+0x70>
	if(MBMESN_VeriCRC(crcR,crcC)==1){
		// On recupere l'adresse dans le trame
		slaveAdress = requestFrame[0];
		// S'il parle pas avec moi je rejete le trame
		// On vérifie si l'adresse est bien notre adresse
		if(slaveAdress!=ThisSlaveAddress)return MBMESN_SLAVE_DEVICE_ERROR;
 80002cc:	4b14      	ldr	r3, [pc, #80]	; (8000320 <HandleMBRequest+0x78>)
 80002ce:	7822      	ldrb	r2, [r4, #0]
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	429a      	cmp	r2, r3
 80002d4:	d122      	bne.n	800031c <HandleMBRequest+0x74>
		// si non
		// On copie le code PDU dans modbusPDU
		 if(requestFrame[1]!=3 && requestFrame[1]!=6 && requestFrame[1]!=16){
 80002d6:	7861      	ldrb	r1, [r4, #1]
 80002d8:	2903      	cmp	r1, #3
 80002da:	d011      	beq.n	8000300 <HandleMBRequest+0x58>
 80002dc:	2906      	cmp	r1, #6
 80002de:	d009      	beq.n	80002f4 <HandleMBRequest+0x4c>
 80002e0:	2910      	cmp	r1, #16
 80002e2:	d013      	beq.n	800030c <HandleMBRequest+0x64>

				 // Si la fonction n'est pas autorisé on envoie le code 0x80+numero de la fonction
				 modbusPDU[0]=128 +requestFrame[1];
							 modbusPDU[1]=  1;				// La fonction de la requete n'est pas supportée par cette esclave
 80002e4:	2301      	movs	r3, #1
 80002e6:	706b      	strb	r3, [r5, #1]
							 *pLengthOfPDU=2;
 80002e8:	2302      	movs	r3, #2
				 modbusPDU[0]=128 +requestFrame[1];
 80002ea:	3980      	subs	r1, #128	; 0x80
 80002ec:	7029      	strb	r1, [r5, #0]
							 *pLengthOfPDU=2;
 80002ee:	803b      	strh	r3, [r7, #0]
			 }


		 }
		// on retourne un MBMESN_OK
		return MBMESN_OK;
 80002f0:	2000      	movs	r0, #0
 80002f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				 HandleMBFunction06(requestFrame+1,modbusPDU,pLengthOfPDU);
 80002f4:	463a      	mov	r2, r7
 80002f6:	4629      	mov	r1, r5
 80002f8:	1c60      	adds	r0, r4, #1
 80002fa:	f000 f833 	bl	8000364 <HandleMBFunction06>
 80002fe:	e7f7      	b.n	80002f0 <HandleMBRequest+0x48>
				 HandleMBFunction03(requestFrame+1,modbusPDU,pLengthOfPDU);
 8000300:	463a      	mov	r2, r7
 8000302:	4629      	mov	r1, r5
 8000304:	1c60      	adds	r0, r4, #1
 8000306:	f000 f84f 	bl	80003a8 <HandleMBFunction03>
 800030a:	e7f1      	b.n	80002f0 <HandleMBRequest+0x48>
				 HandleMBFunction16(requestFrame+1,modbusPDU,pLengthOfPDU);
 800030c:	463a      	mov	r2, r7
 800030e:	4629      	mov	r1, r5
 8000310:	1c60      	adds	r0, r4, #1
 8000312:	f000 f87b 	bl	800040c <HandleMBFunction16>
 8000316:	e7eb      	b.n	80002f0 <HandleMBRequest+0x48>
	}
	// si non on retourne un CRC_ERROR
	else return MBMESN_CRC_ERROR;
 8000318:	2004      	movs	r0, #4
 800031a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(slaveAdress!=ThisSlaveAddress)return MBMESN_SLAVE_DEVICE_ERROR;
 800031c:	2003      	movs	r0, #3
 800031e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000320:	2000002c 	.word	0x2000002c

08000324 <BuildMBResponse>:


}
/* This function receives a Modbus PDU and builds a response frame by adding slave address and the CRC */
MBMESN_errorstatus_t BuildMBResponse(uint8_t * modbusPDU, uint16_t lengthOfPDU, uint8_t *responseFrame, uint16_t *pLengthOfResponseFrame){
 8000324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000326:	460d      	mov	r5, r1
 8000328:	4614      	mov	r4, r2
 800032a:	461f      	mov	r7, r3

		uint16_t crc;


		// On insère au début du trame l'adresse de l'esclave qui est fixée à 01
		responseFrame[0]=ThisSlaveAddress;
 800032c:	4b0c      	ldr	r3, [pc, #48]	; (8000360 <BuildMBResponse+0x3c>)
 800032e:	3801      	subs	r0, #1
 8000330:	781b      	ldrb	r3, [r3, #0]
 8000332:	7013      	strb	r3, [r2, #0]
		// puis On insère les données
		for(int i=0;i<lengthOfPDU;i++)responseFrame[i+1]=modbusPDU[i];
 8000334:	1b13      	subs	r3, r2, r4
 8000336:	429d      	cmp	r5, r3
 8000338:	dc0d      	bgt.n	8000356 <BuildMBResponse+0x32>
		// On calcule le crc du trame
				crc = MBMESN_computeCRC(responseFrame,lengthOfPDU+1);
 800033a:	1c6e      	adds	r6, r5, #1
 800033c:	b2b6      	uxth	r6, r6
 800033e:	4631      	mov	r1, r6
 8000340:	4620      	mov	r0, r4
 8000342:	f7ff ff97 	bl	8000274 <MBMESN_computeCRC>
			frame[frameLengthWoCRC] = (uint8_t )(crc);
 8000346:	55a0      	strb	r0, [r4, r6]
			frame[frameLengthWoCRC+1] = (uint8_t )( crc >> 8);
 8000348:	4434      	add	r4, r6
 800034a:	0a00      	lsrs	r0, r0, #8
 800034c:	7060      	strb	r0, [r4, #1]
			*pLengthOfResponseFrame = frameLengthWoCRC + 2;// on ajoute les 2 octets pour crc à la taille du frame
 800034e:	3503      	adds	r5, #3
 8000350:	803d      	strh	r5, [r7, #0]
				// On ajoute le crc à la fin du trame
				// on ajoute 1 parceque on a ajouté l'octet de l'adresse de l'esclave
				 MBMESN_AjoutCRC(responseFrame, lengthOfPDU+1,pLengthOfResponseFrame, crc);

		return MBMESN_OK;
}
 8000352:	2000      	movs	r0, #0
 8000354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for(int i=0;i<lengthOfPDU;i++)responseFrame[i+1]=modbusPDU[i];
 8000356:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800035a:	f802 3f01 	strb.w	r3, [r2, #1]!
 800035e:	e7e9      	b.n	8000334 <BuildMBResponse+0x10>
 8000360:	2000002c 	.word	0x2000002c

08000364 <HandleMBFunction06>:
 */

#include "MBMESN_slavepdu.h"

MBMESN_errorstatus_t HandleMBFunction06(uint8_t * requestParameters, uint8_t * responseParameters, uint16_t * lengthOfResponsParameters)
{
 8000364:	b530      	push	{r4, r5, lr}

	uint16_t RegiAdd,data;

	RegiAdd = (uint16_t)requestParameters[1];
 8000366:	7843      	ldrb	r3, [r0, #1]
	RegiAdd <<=8;
	RegiAdd |= (uint16_t )requestParameters[2];
 8000368:	7884      	ldrb	r4, [r0, #2]
 800036a:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
	// si l'adresse du registre est autorisé alors
	if(RegiAdd  <  NB_OF_MBREGISTERS){
 800036e:	2c01      	cmp	r4, #1
 8000370:	d811      	bhi.n	8000396 <HandleMBFunction06+0x32>
		// On écrit la donnée dans le regsitre
		data=(uint16_t )requestParameters[3];
 8000372:	78c5      	ldrb	r5, [r0, #3]
		data<<=8;
		data|=(uint16_t )requestParameters[4];
 8000374:	7903      	ldrb	r3, [r0, #4]
		MB_Registers[RegiAdd]=data;
 8000376:	480b      	ldr	r0, [pc, #44]	; (80003a4 <HandleMBFunction06+0x40>)
		data|=(uint16_t )requestParameters[4];
 8000378:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		MB_Registers[RegiAdd]=data;
 800037c:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]



		// On construit la reponse qui doit-etre sur 5 octets
		responseParameters[0]= 6;
 8000380:	2006      	movs	r0, #6
		responseParameters[1]=(uint8_t)(RegiAdd>>8);
		responseParameters[2]=(uint8_t)RegiAdd;
 8000382:	708c      	strb	r4, [r1, #2]
		responseParameters[0]= 6;
 8000384:	7008      	strb	r0, [r1, #0]
		responseParameters[3]=(uint8_t)(data>>8);
 8000386:	0a1c      	lsrs	r4, r3, #8
		responseParameters[4]=(uint8_t)data;
 8000388:	710b      	strb	r3, [r1, #4]
		responseParameters[1]=(uint8_t)(RegiAdd>>8);
 800038a:	2000      	movs	r0, #0
		*lengthOfResponsParameters=5;// 5octets
 800038c:	2305      	movs	r3, #5
		responseParameters[1]=(uint8_t)(RegiAdd>>8);
 800038e:	7048      	strb	r0, [r1, #1]
		responseParameters[3]=(uint8_t)(data>>8);
 8000390:	70cc      	strb	r4, [r1, #3]
		*lengthOfResponsParameters=5;// 5octets
 8000392:	8013      	strh	r3, [r2, #0]
		return MBMESN_OK;
 8000394:	bd30      	pop	{r4, r5, pc}
	}
	// si non
	else {
		 // il y'a une erreur d'adresse on envoie le code 0x83
		responseParameters[0]=0x86;
 8000396:	2386      	movs	r3, #134	; 0x86
 8000398:	700b      	strb	r3, [r1, #0]
		responseParameters[1]=  2;				// L'adresse des données indiquée est invalide
 800039a:	2302      	movs	r3, #2
		*lengthOfResponsParameters=2;
		return MBMESN_DATA_ADDRESS_ERROR;
 800039c:	2006      	movs	r0, #6
		responseParameters[1]=  2;				// L'adresse des données indiquée est invalide
 800039e:	704b      	strb	r3, [r1, #1]
		*lengthOfResponsParameters=2;
 80003a0:	8013      	strh	r3, [r2, #0]





}
 80003a2:	bd30      	pop	{r4, r5, pc}
 80003a4:	2000002e 	.word	0x2000002e

080003a8 <HandleMBFunction03>:
MBMESN_errorstatus_t HandleMBFunction03(uint8_t * requestParameters, uint8_t * responseParameters, uint16_t * pNbOfRegisters){
 80003a8:	b530      	push	{r4, r5, lr}

	uint16_t startAdd,numberOfRegisters,plageAdd;
	int j=0;
		startAdd = (uint16_t)requestParameters[1];
 80003aa:	7843      	ldrb	r3, [r0, #1]
		startAdd <<=8;
		startAdd |= (uint16_t )requestParameters[2];
 80003ac:	7884      	ldrb	r4, [r0, #2]
		numberOfRegisters=(uint16_t)requestParameters[3];
 80003ae:	78c5      	ldrb	r5, [r0, #3]
		startAdd |= (uint16_t )requestParameters[2];
 80003b0:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
		numberOfRegisters<<=8;
		numberOfRegisters|= (uint16_t )requestParameters[4];
 80003b4:	7903      	ldrb	r3, [r0, #4]
 80003b6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		plageAdd = startAdd + numberOfRegisters;// ça définie la plage des adresses
 80003ba:	18e0      	adds	r0, r4, r3
		// si la plage des adresses indiqués est valide
		if(plageAdd  <=  NB_OF_MBREGISTERS){
 80003bc:	b280      	uxth	r0, r0
 80003be:	2802      	cmp	r0, #2
 80003c0:	d81a      	bhi.n	80003f8 <HandleMBFunction03+0x50>
			responseParameters[0]= 3;
 80003c2:	2003      	movs	r0, #3
 80003c4:	7008      	strb	r0, [r1, #0]
			responseParameters[1]= 2*numberOfRegisters;
 80003c6:	0058      	lsls	r0, r3, #1
 80003c8:	7048      	strb	r0, [r1, #1]

			for(int i=0;i<numberOfRegisters;i++){
 80003ca:	b183      	cbz	r3, 80003ee <HandleMBFunction03+0x46>

					responseParameters[j+2]=(uint8_t)(MB_Registers[startAdd+i]>>8);
 80003cc:	480e      	ldr	r0, [pc, #56]	; (8000408 <HandleMBFunction03+0x60>)
			for(int i=0;i<numberOfRegisters;i++){
 80003ce:	2b01      	cmp	r3, #1
					responseParameters[j+2]=(uint8_t)(MB_Registers[startAdd+i]>>8);
 80003d0:	f830 5014 	ldrh.w	r5, [r0, r4, lsl #1]
 80003d4:	ea4f 2515 	mov.w	r5, r5, lsr #8
 80003d8:	708d      	strb	r5, [r1, #2]
					j++;
					responseParameters[j+2]=(uint8_t)MB_Registers[startAdd+i];
 80003da:	f830 5014 	ldrh.w	r5, [r0, r4, lsl #1]
 80003de:	70cd      	strb	r5, [r1, #3]
			for(int i=0;i<numberOfRegisters;i++){
 80003e0:	d005      	beq.n	80003ee <HandleMBFunction03+0x46>
					responseParameters[j+2]=(uint8_t)(MB_Registers[startAdd+i]>>8);
 80003e2:	3401      	adds	r4, #1
 80003e4:	f830 0014 	ldrh.w	r0, [r0, r4, lsl #1]
 80003e8:	0a04      	lsrs	r4, r0, #8
 80003ea:	710c      	strb	r4, [r1, #4]
					responseParameters[j+2]=(uint8_t)MB_Registers[startAdd+i];
 80003ec:	7148      	strb	r0, [r1, #5]
					j++;

			}
			j=0;// Pour parcouru à nouveau toutes les octets dans les registres d'ecriture

			*pNbOfRegisters=2*numberOfRegisters+2;
 80003ee:	3301      	adds	r3, #1
 80003f0:	005b      	lsls	r3, r3, #1
 80003f2:	8013      	strh	r3, [r2, #0]
			return MBMESN_OK;
 80003f4:	2000      	movs	r0, #0
 80003f6:	bd30      	pop	{r4, r5, pc}
		}
		// si non
		else {
			 // la plage des adresses est invalid on envoie le code 0x83
			responseParameters[0]=0x83;
 80003f8:	2383      	movs	r3, #131	; 0x83
 80003fa:	700b      	strb	r3, [r1, #0]
			responseParameters[1]=  2;				//la plage des adresse est invalide
 80003fc:	2302      	movs	r3, #2
			*pNbOfRegisters=2;
			return MBMESN_DATA_ADDRESS_ERROR;
 80003fe:	2006      	movs	r0, #6
			responseParameters[1]=  2;				//la plage des adresse est invalide
 8000400:	704b      	strb	r3, [r1, #1]
			*pNbOfRegisters=2;
 8000402:	8013      	strh	r3, [r2, #0]
		}


}
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	bf00      	nop
 8000408:	2000002e 	.word	0x2000002e

0800040c <HandleMBFunction16>:

MBMESN_errorstatus_t HandleMBFunction16(uint8_t * requestParameters, uint8_t * responseParameters, uint16_t * lengthOfResponsParameters){
 800040c:	b5f0      	push	{r4, r5, r6, r7, lr}


	uint16_t startAdd,numberOfRegisters,plageAdd,byteCount;
	int j=0;
		startAdd = (uint16_t)requestParameters[1];
 800040e:	7843      	ldrb	r3, [r0, #1]
		startAdd <<=8;
		startAdd |= (uint16_t )requestParameters[2];
 8000410:	7884      	ldrb	r4, [r0, #2]
		numberOfRegisters=(uint16_t)requestParameters[3];
 8000412:	78c5      	ldrb	r5, [r0, #3]
		startAdd |= (uint16_t )requestParameters[2];
 8000414:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
		numberOfRegisters<<=8;
		numberOfRegisters|= (uint16_t )requestParameters[4];
 8000418:	7903      	ldrb	r3, [r0, #4]
 800041a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		byteCount=requestParameters[5];
		plageAdd = startAdd + numberOfRegisters;// ça définie la plage des adresses
 800041e:	18e5      	adds	r5, r4, r3
		// si la plage des adresses indiqués est valide
		if(plageAdd  <=  NB_OF_MBREGISTERS){
 8000420:	b2ad      	uxth	r5, r5
 8000422:	2d02      	cmp	r5, #2
 8000424:	d81b      	bhi.n	800045e <HandleMBFunction16+0x52>


			for(int i=0;i<byteCount;i++){
 8000426:	7947      	ldrb	r7, [r0, #5]
 8000428:	b16f      	cbz	r7, 8000446 <HandleMBFunction16+0x3a>

				MB_Registers[j]=(uint16_t)requestParameters[i+6];// On commence par le 7ème octets
 800042a:	f890 e006 	ldrb.w	lr, [r0, #6]
				i++;
				MB_Registers[j]<<=8;

				MB_Registers[j] |= (uint16_t)requestParameters[i+6];
 800042e:	79c5      	ldrb	r5, [r0, #7]
 8000430:	4e0e      	ldr	r6, [pc, #56]	; (800046c <HandleMBFunction16+0x60>)
			for(int i=0;i<byteCount;i++){
 8000432:	2f02      	cmp	r7, #2
				MB_Registers[j] |= (uint16_t)requestParameters[i+6];
 8000434:	ea45 250e 	orr.w	r5, r5, lr, lsl #8
 8000438:	8035      	strh	r5, [r6, #0]
				MB_Registers[j]=(uint16_t)requestParameters[i+6];// On commence par le 7ème octets
 800043a:	bfc1      	itttt	gt
 800043c:	7a05      	ldrbgt	r5, [r0, #8]
				MB_Registers[j] |= (uint16_t)requestParameters[i+6];
 800043e:	7a40      	ldrbgt	r0, [r0, #9]
 8000440:	ea40 2005 	orrgt.w	r0, r0, r5, lsl #8
 8000444:	8070      	strhgt	r0, [r6, #2]
				j++;

			}
			j=0;// Pour parcouru à nouveau toutes les octets dans les registres

						responseParameters[0]= 16;
 8000446:	2010      	movs	r0, #16
 8000448:	7008      	strb	r0, [r1, #0]
						responseParameters[1]= (uint8_t)(startAdd>>8);
 800044a:	0a20      	lsrs	r0, r4, #8
 800044c:	7048      	strb	r0, [r1, #1]
						responseParameters[2]=(uint8_t)startAdd;
						responseParameters[3]=(uint8_t)(numberOfRegisters>>8);
						responseParameters[4]=(uint8_t)numberOfRegisters;
 800044e:	710b      	strb	r3, [r1, #4]
						responseParameters[3]=(uint8_t)(numberOfRegisters>>8);
 8000450:	0a18      	lsrs	r0, r3, #8
						*lengthOfResponsParameters=5;
 8000452:	2305      	movs	r3, #5
						responseParameters[3]=(uint8_t)(numberOfRegisters>>8);
 8000454:	70c8      	strb	r0, [r1, #3]
						responseParameters[2]=(uint8_t)startAdd;
 8000456:	708c      	strb	r4, [r1, #2]
			return MBMESN_OK;
 8000458:	2000      	movs	r0, #0
						*lengthOfResponsParameters=5;
 800045a:	8013      	strh	r3, [r2, #0]
			return MBMESN_OK;
 800045c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		}
		// si non
		else {
			 // la plage des adresses est invalid on envoie le code 0x90
			responseParameters[0]=0x90;
 800045e:	2390      	movs	r3, #144	; 0x90
 8000460:	700b      	strb	r3, [r1, #0]
			responseParameters[1]=  2;				//la plage des adresse est invalide
 8000462:	2302      	movs	r3, #2
			*lengthOfResponsParameters=2;
			return MBMESN_DATA_ADDRESS_ERROR;
 8000464:	2006      	movs	r0, #6
			responseParameters[1]=  2;				//la plage des adresse est invalide
 8000466:	704b      	strb	r3, [r1, #1]
			*lengthOfResponsParameters=2;
 8000468:	8013      	strh	r3, [r2, #0]





}
 800046a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800046c:	2000002e 	.word	0x2000002e

08000470 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000470:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8000472:	4b0f      	ldr	r3, [pc, #60]	; (80004b0 <HAL_InitTick+0x40>)
{
 8000474:	4605      	mov	r5, r0
  if (uwTickFreq != 0U)
 8000476:	6818      	ldr	r0, [r3, #0]
 8000478:	b908      	cbnz	r0, 800047e <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 800047a:	2001      	movs	r0, #1
 800047c:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800047e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000482:	fbb3 f3f0 	udiv	r3, r3, r0
 8000486:	4a0b      	ldr	r2, [pc, #44]	; (80004b4 <HAL_InitTick+0x44>)
 8000488:	6810      	ldr	r0, [r2, #0]
 800048a:	fbb0 f0f3 	udiv	r0, r0, r3
 800048e:	f000 f88b 	bl	80005a8 <HAL_SYSTICK_Config>
 8000492:	4604      	mov	r4, r0
 8000494:	2800      	cmp	r0, #0
 8000496:	d1f0      	bne.n	800047a <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000498:	2d0f      	cmp	r5, #15
 800049a:	d8ee      	bhi.n	800047a <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800049c:	4602      	mov	r2, r0
 800049e:	4629      	mov	r1, r5
 80004a0:	f04f 30ff 	mov.w	r0, #4294967295
 80004a4:	f000 f83e 	bl	8000524 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80004a8:	4b03      	ldr	r3, [pc, #12]	; (80004b8 <HAL_InitTick+0x48>)
 80004aa:	4620      	mov	r0, r4
 80004ac:	601d      	str	r5, [r3, #0]
  }

  /* Return function status */
  return status;
}
 80004ae:	bd38      	pop	{r3, r4, r5, pc}
 80004b0:	20000000 	.word	0x20000000
 80004b4:	20000008 	.word	0x20000008
 80004b8:	20000004 	.word	0x20000004

080004bc <HAL_Init>:
{
 80004bc:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004be:	2003      	movs	r0, #3
 80004c0:	f000 f81e 	bl	8000500 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004c4:	2000      	movs	r0, #0
 80004c6:	f7ff ffd3 	bl	8000470 <HAL_InitTick>
 80004ca:	4604      	mov	r4, r0
 80004cc:	b918      	cbnz	r0, 80004d6 <HAL_Init+0x1a>
    HAL_MspInit();
 80004ce:	f000 ff75 	bl	80013bc <HAL_MspInit>
}
 80004d2:	4620      	mov	r0, r4
 80004d4:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80004d6:	2401      	movs	r4, #1
 80004d8:	e7fb      	b.n	80004d2 <HAL_Init+0x16>
	...

080004dc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80004dc:	4a03      	ldr	r2, [pc, #12]	; (80004ec <HAL_IncTick+0x10>)
 80004de:	4904      	ldr	r1, [pc, #16]	; (80004f0 <HAL_IncTick+0x14>)
 80004e0:	6813      	ldr	r3, [r2, #0]
 80004e2:	6809      	ldr	r1, [r1, #0]
 80004e4:	440b      	add	r3, r1
 80004e6:	6013      	str	r3, [r2, #0]
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	20000034 	.word	0x20000034
 80004f0:	20000000 	.word	0x20000000

080004f4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80004f4:	4b01      	ldr	r3, [pc, #4]	; (80004fc <HAL_GetTick+0x8>)
 80004f6:	6818      	ldr	r0, [r3, #0]
}
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	20000034 	.word	0x20000034

08000500 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000500:	4a07      	ldr	r2, [pc, #28]	; (8000520 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000502:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000504:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000506:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800050a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800050e:	041b      	lsls	r3, r3, #16
 8000510:	0c1b      	lsrs	r3, r3, #16
 8000512:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000516:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800051a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800051c:	60d3      	str	r3, [r2, #12]
 800051e:	4770      	bx	lr
 8000520:	e000ed00 	.word	0xe000ed00

08000524 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000524:	4b17      	ldr	r3, [pc, #92]	; (8000584 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000526:	b530      	push	{r4, r5, lr}
 8000528:	68dc      	ldr	r4, [r3, #12]
 800052a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800052e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000532:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000534:	2b04      	cmp	r3, #4
 8000536:	bf28      	it	cs
 8000538:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800053a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800053c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000540:	bf98      	it	ls
 8000542:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000544:	fa05 f303 	lsl.w	r3, r5, r3
 8000548:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800054c:	bf88      	it	hi
 800054e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000550:	4019      	ands	r1, r3
 8000552:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000554:	fa05 f404 	lsl.w	r4, r5, r4
 8000558:	3c01      	subs	r4, #1
 800055a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800055c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800055e:	ea42 0201 	orr.w	r2, r2, r1
 8000562:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000566:	bfa9      	itett	ge
 8000568:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800056c:	4b06      	ldrlt	r3, [pc, #24]	; (8000588 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800056e:	b2d2      	uxtbge	r2, r2
 8000570:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000574:	bfbb      	ittet	lt
 8000576:	f000 000f 	andlt.w	r0, r0, #15
 800057a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800057c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000580:	541a      	strblt	r2, [r3, r0]
 8000582:	bd30      	pop	{r4, r5, pc}
 8000584:	e000ed00 	.word	0xe000ed00
 8000588:	e000ed14 	.word	0xe000ed14

0800058c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800058c:	2800      	cmp	r0, #0
 800058e:	db08      	blt.n	80005a2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000590:	2301      	movs	r3, #1
 8000592:	0942      	lsrs	r2, r0, #5
 8000594:	f000 001f 	and.w	r0, r0, #31
 8000598:	fa03 f000 	lsl.w	r0, r3, r0
 800059c:	4b01      	ldr	r3, [pc, #4]	; (80005a4 <HAL_NVIC_EnableIRQ+0x18>)
 800059e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80005a2:	4770      	bx	lr
 80005a4:	e000e100 	.word	0xe000e100

080005a8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005a8:	3801      	subs	r0, #1
 80005aa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80005ae:	d20a      	bcs.n	80005c6 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b0:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b4:	4a06      	ldr	r2, [pc, #24]	; (80005d0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005b6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005bc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005be:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005c0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80005c6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	e000e010 	.word	0xe000e010
 80005d0:	e000ed00 	.word	0xe000ed00

080005d4 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80005d4:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 80005d8:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80005da:	2a02      	cmp	r2, #2
 80005dc:	d003      	beq.n	80005e6 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80005de:	2204      	movs	r2, #4
 80005e0:	6382      	str	r2, [r0, #56]	; 0x38

    status = HAL_ERROR;
 80005e2:	2001      	movs	r0, #1
 80005e4:	bd10      	pop	{r4, pc}
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80005e6:	6802      	ldr	r2, [r0, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80005e8:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80005ea:	6811      	ldr	r1, [r2, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80005ec:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80005ee:	f021 010e 	bic.w	r1, r1, #14
 80005f2:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80005f4:	6811      	ldr	r1, [r2, #0]
 80005f6:	f021 0101 	bic.w	r1, r1, #1
 80005fa:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80005fc:	2101      	movs	r1, #1
 80005fe:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000600:	f002 021c 	and.w	r2, r2, #28
 8000604:	fa01 f202 	lsl.w	r2, r1, r2
 8000608:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 800060a:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 800060c:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000610:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8000614:	b113      	cbz	r3, 800061c <HAL_DMA_Abort_IT+0x48>
    {
      hdma->XferAbortCallback(hdma);
 8000616:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000618:	4620      	mov	r0, r4
 800061a:	bd10      	pop	{r4, pc}
 800061c:	4618      	mov	r0, r3
    }
  }
  return status;
}
 800061e:	bd10      	pop	{r4, pc}

08000620 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
  uint32_t position = 0x00;
 8000620:	2300      	movs	r3, #0
{ 
 8000622:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000626:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800062a:	f8df 9194 	ldr.w	r9, [pc, #404]	; 80007c0 <HAL_GPIO_Init+0x1a0>
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800062e:	4a62      	ldr	r2, [pc, #392]	; (80007b8 <HAL_GPIO_Init+0x198>)
  while (((GPIO_Init->Pin) >> position) != 0)
 8000630:	fa38 f403 	lsrs.w	r4, r8, r3
 8000634:	d102      	bne.n	800063c <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  } 
}
 8000636:	b003      	add	sp, #12
 8000638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800063c:	f04f 0e01 	mov.w	lr, #1
 8000640:	fa0e fe03 	lsl.w	lr, lr, r3
    if(iocurrent)
 8000644:	ea18 060e 	ands.w	r6, r8, lr
 8000648:	f000 80a8 	beq.w	800079c <HAL_GPIO_Init+0x17c>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800064c:	684c      	ldr	r4, [r1, #4]
 800064e:	f024 0710 	bic.w	r7, r4, #16
 8000652:	2f02      	cmp	r7, #2
 8000654:	d116      	bne.n	8000684 <HAL_GPIO_Init+0x64>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8000656:	f04f 0c0f 	mov.w	ip, #15
        temp = GPIOx->AFR[position >> 3];
 800065a:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800065e:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8000662:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000666:	f8da 5020 	ldr.w	r5, [sl, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 800066a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800066e:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000672:	ea25 0c0c 	bic.w	ip, r5, ip
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8000676:	690d      	ldr	r5, [r1, #16]
 8000678:	fa05 f50b 	lsl.w	r5, r5, fp
 800067c:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8000680:	f8ca 5020 	str.w	r5, [sl, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8000684:	2503      	movs	r5, #3
 8000686:	ea4f 0a43 	mov.w	sl, r3, lsl #1
 800068a:	fa05 f50a 	lsl.w	r5, r5, sl
 800068e:	43ed      	mvns	r5, r5
      temp = GPIOx->MODER;
 8000690:	f8d0 b000 	ldr.w	fp, [r0]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000694:	f004 0c03 	and.w	ip, r4, #3
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8000698:	ea0b 0b05 	and.w	fp, fp, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800069c:	fa0c fc0a 	lsl.w	ip, ip, sl
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006a0:	3f01      	subs	r7, #1
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80006a2:	ea4c 0c0b 	orr.w	ip, ip, fp
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006a6:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80006a8:	f8c0 c000 	str.w	ip, [r0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006ac:	d811      	bhi.n	80006d2 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR; 
 80006ae:	6887      	ldr	r7, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80006b0:	ea07 0b05 	and.w	fp, r7, r5
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80006b4:	68cf      	ldr	r7, [r1, #12]
 80006b6:	fa07 fc0a 	lsl.w	ip, r7, sl
 80006ba:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80006be:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80006c0:	6847      	ldr	r7, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80006c2:	ea27 0e0e 	bic.w	lr, r7, lr
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80006c6:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80006ca:	409f      	lsls	r7, r3
 80006cc:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80006d0:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80006d2:	68c7      	ldr	r7, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80006d4:	403d      	ands	r5, r7
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80006d6:	688f      	ldr	r7, [r1, #8]
 80006d8:	fa07 f70a 	lsl.w	r7, r7, sl
 80006dc:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80006de:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80006e0:	00e5      	lsls	r5, r4, #3
 80006e2:	d55b      	bpl.n	800079c <HAL_GPIO_Init+0x17c>
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80006e4:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006e8:	f8d9 5020 	ldr.w	r5, [r9, #32]
 80006ec:	f023 0703 	bic.w	r7, r3, #3
 80006f0:	f045 0501 	orr.w	r5, r5, #1
 80006f4:	f8c9 5020 	str.w	r5, [r9, #32]
 80006f8:	f8d9 5020 	ldr.w	r5, [r9, #32]
 80006fc:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000700:	f005 0501 	and.w	r5, r5, #1
 8000704:	9501      	str	r5, [sp, #4]
 8000706:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800070a:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800070e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000710:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp = SYSCFG->EXTICR[position >> 2];
 8000714:	f8d7 a008 	ldr.w	sl, [r7, #8]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000718:	fa0c f50e 	lsl.w	r5, ip, lr
 800071c:	ea2a 0c05 	bic.w	ip, sl, r5
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000720:	4d26      	ldr	r5, [pc, #152]	; (80007bc <HAL_GPIO_Init+0x19c>)
 8000722:	42a8      	cmp	r0, r5
 8000724:	d03c      	beq.n	80007a0 <HAL_GPIO_Init+0x180>
 8000726:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800072a:	42a8      	cmp	r0, r5
 800072c:	d03a      	beq.n	80007a4 <HAL_GPIO_Init+0x184>
 800072e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000732:	42a8      	cmp	r0, r5
 8000734:	d038      	beq.n	80007a8 <HAL_GPIO_Init+0x188>
 8000736:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800073a:	42a8      	cmp	r0, r5
 800073c:	d036      	beq.n	80007ac <HAL_GPIO_Init+0x18c>
 800073e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000742:	42a8      	cmp	r0, r5
 8000744:	d034      	beq.n	80007b0 <HAL_GPIO_Init+0x190>
 8000746:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800074a:	42a8      	cmp	r0, r5
 800074c:	d032      	beq.n	80007b4 <HAL_GPIO_Init+0x194>
 800074e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000752:	42a8      	cmp	r0, r5
 8000754:	bf14      	ite	ne
 8000756:	2507      	movne	r5, #7
 8000758:	2506      	moveq	r5, #6
 800075a:	fa05 f50e 	lsl.w	r5, r5, lr
 800075e:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8000762:	60bd      	str	r5, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000764:	43f7      	mvns	r7, r6
        temp = EXTI->IMR;
 8000766:	6815      	ldr	r5, [r2, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000768:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800076c:	bf0c      	ite	eq
 800076e:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 8000770:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 8000772:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000774:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000776:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 800077a:	bf0c      	ite	eq
 800077c:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 800077e:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 8000780:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000782:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000784:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000788:	bf0c      	ite	eq
 800078a:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 800078c:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 800078e:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000790:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000792:	02a4      	lsls	r4, r4, #10
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000794:	bf54      	ite	pl
 8000796:	403d      	andpl	r5, r7
          SET_BIT(temp, iocurrent); 
 8000798:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 800079a:	60d5      	str	r5, [r2, #12]
    position++;
 800079c:	3301      	adds	r3, #1
 800079e:	e747      	b.n	8000630 <HAL_GPIO_Init+0x10>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80007a0:	2500      	movs	r5, #0
 80007a2:	e7da      	b.n	800075a <HAL_GPIO_Init+0x13a>
 80007a4:	2501      	movs	r5, #1
 80007a6:	e7d8      	b.n	800075a <HAL_GPIO_Init+0x13a>
 80007a8:	2502      	movs	r5, #2
 80007aa:	e7d6      	b.n	800075a <HAL_GPIO_Init+0x13a>
 80007ac:	2503      	movs	r5, #3
 80007ae:	e7d4      	b.n	800075a <HAL_GPIO_Init+0x13a>
 80007b0:	2504      	movs	r5, #4
 80007b2:	e7d2      	b.n	800075a <HAL_GPIO_Init+0x13a>
 80007b4:	2505      	movs	r5, #5
 80007b6:	e7d0      	b.n	800075a <HAL_GPIO_Init+0x13a>
 80007b8:	40010400 	.word	0x40010400
 80007bc:	40020000 	.word	0x40020000
 80007c0:	40023800 	.word	0x40023800

080007c4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80007c4:	b10a      	cbz	r2, 80007ca <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80007c6:	6181      	str	r1, [r0, #24]
 80007c8:	4770      	bx	lr
 80007ca:	0409      	lsls	r1, r1, #16
 80007cc:	e7fb      	b.n	80007c6 <HAL_GPIO_WritePin+0x2>

080007ce <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80007ce:	6943      	ldr	r3, [r0, #20]
 80007d0:	420b      	tst	r3, r1
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80007d2:	bf18      	it	ne
 80007d4:	0409      	lslne	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80007d6:	6181      	str	r1, [r0, #24]
 80007d8:	4770      	bx	lr
	...

080007dc <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80007dc:	4b1c      	ldr	r3, [pc, #112]	; (8000850 <RCC_SetFlashLatencyFromMSIRange+0x74>)
{
 80007de:	b082      	sub	sp, #8
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80007e0:	689a      	ldr	r2, [r3, #8]
 80007e2:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 80007e6:	d00c      	beq.n	8000802 <RCC_SetFlashLatencyFromMSIRange+0x26>
{
 80007e8:	2200      	movs	r2, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80007ea:	491a      	ldr	r1, [pc, #104]	; (8000854 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 80007ec:	680b      	ldr	r3, [r1, #0]
 80007ee:	f023 0301 	bic.w	r3, r3, #1
 80007f2:	4313      	orrs	r3, r2
 80007f4:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80007f6:	6808      	ldr	r0, [r1, #0]
 80007f8:	f000 0001 	and.w	r0, r0, #1
 80007fc:	4050      	eors	r0, r2
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 80007fe:	b002      	add	sp, #8
 8000800:	4770      	bx	lr
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000802:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000804:	4914      	ldr	r1, [pc, #80]	; (8000858 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8000806:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 800080a:	d00f      	beq.n	800082c <RCC_SetFlashLatencyFromMSIRange+0x50>
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800080c:	680a      	ldr	r2, [r1, #0]
 800080e:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8000812:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 8000816:	d1e7      	bne.n	80007e8 <RCC_SetFlashLatencyFromMSIRange+0xc>
 8000818:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 800081c:	d1e4      	bne.n	80007e8 <RCC_SetFlashLatencyFromMSIRange+0xc>
  __HAL_FLASH_SET_LATENCY(latency);
 800081e:	4a0d      	ldr	r2, [pc, #52]	; (8000854 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 8000820:	6813      	ldr	r3, [r2, #0]
 8000822:	f043 0304 	orr.w	r3, r3, #4
 8000826:	6013      	str	r3, [r2, #0]
      latency = FLASH_LATENCY_1; /* 1WS */
 8000828:	2201      	movs	r2, #1
 800082a:	e7de      	b.n	80007ea <RCC_SetFlashLatencyFromMSIRange+0xe>
      __HAL_RCC_PWR_CLK_ENABLE();
 800082c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800082e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000832:	625a      	str	r2, [r3, #36]	; 0x24
 8000834:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000836:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800083a:	9201      	str	r2, [sp, #4]
 800083c:	9a01      	ldr	r2, [sp, #4]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800083e:	680a      	ldr	r2, [r1, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 8000840:	6a59      	ldr	r1, [r3, #36]	; 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8000842:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 8000846:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
 800084a:	6259      	str	r1, [r3, #36]	; 0x24
 800084c:	e7e1      	b.n	8000812 <RCC_SetFlashLatencyFromMSIRange+0x36>
 800084e:	bf00      	nop
 8000850:	40023800 	.word	0x40023800
 8000854:	40023c00 	.word	0x40023c00
 8000858:	40007000 	.word	0x40007000

0800085c <HAL_RCC_OscConfig>:
{
 800085c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8000860:	4604      	mov	r4, r0
 8000862:	b908      	cbnz	r0, 8000868 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000864:	2001      	movs	r0, #1
 8000866:	e077      	b.n	8000958 <HAL_RCC_OscConfig+0xfc>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000868:	4ba0      	ldr	r3, [pc, #640]	; (8000aec <HAL_RCC_OscConfig+0x290>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800086a:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800086c:	689e      	ldr	r6, [r3, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800086e:	689f      	ldr	r7, [r3, #8]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000870:	07d0      	lsls	r0, r2, #31
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000872:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000876:	f407 3780 	and.w	r7, r7, #65536	; 0x10000
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800087a:	d44b      	bmi.n	8000914 <HAL_RCC_OscConfig+0xb8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800087c:	6823      	ldr	r3, [r4, #0]
 800087e:	0799      	lsls	r1, r3, #30
 8000880:	f100 8092 	bmi.w	80009a8 <HAL_RCC_OscConfig+0x14c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000884:	6823      	ldr	r3, [r4, #0]
 8000886:	06d8      	lsls	r0, r3, #27
 8000888:	d536      	bpl.n	80008f8 <HAL_RCC_OscConfig+0x9c>
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 800088a:	2e00      	cmp	r6, #0
 800088c:	f040 80dc 	bne.w	8000a48 <HAL_RCC_OscConfig+0x1ec>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000890:	4d96      	ldr	r5, [pc, #600]	; (8000aec <HAL_RCC_OscConfig+0x290>)
 8000892:	682b      	ldr	r3, [r5, #0]
 8000894:	0599      	lsls	r1, r3, #22
 8000896:	d502      	bpl.n	800089e <HAL_RCC_OscConfig+0x42>
 8000898:	69a3      	ldr	r3, [r4, #24]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d0e2      	beq.n	8000864 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800089e:	686b      	ldr	r3, [r5, #4]
 80008a0:	6a20      	ldr	r0, [r4, #32]
 80008a2:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80008a6:	4298      	cmp	r0, r3
 80008a8:	f240 80bc 	bls.w	8000a24 <HAL_RCC_OscConfig+0x1c8>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80008ac:	f7ff ff96 	bl	80007dc <RCC_SetFlashLatencyFromMSIRange>
 80008b0:	2800      	cmp	r0, #0
 80008b2:	d1d7      	bne.n	8000864 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80008b4:	686b      	ldr	r3, [r5, #4]
 80008b6:	6a22      	ldr	r2, [r4, #32]
 80008b8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80008bc:	4313      	orrs	r3, r2
 80008be:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80008c0:	686b      	ldr	r3, [r5, #4]
 80008c2:	69e2      	ldr	r2, [r4, #28]
 80008c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80008c8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80008cc:	606b      	str	r3, [r5, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80008ce:	4b87      	ldr	r3, [pc, #540]	; (8000aec <HAL_RCC_OscConfig+0x290>)
 80008d0:	6899      	ldr	r1, [r3, #8]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80008d2:	6a23      	ldr	r3, [r4, #32]
 80008d4:	0b5b      	lsrs	r3, r3, #13
 80008d6:	1c5a      	adds	r2, r3, #1
 80008d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008dc:	4093      	lsls	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80008de:	f3c1 1203 	ubfx	r2, r1, #4, #4
 80008e2:	4983      	ldr	r1, [pc, #524]	; (8000af0 <HAL_RCC_OscConfig+0x294>)
 80008e4:	5c8a      	ldrb	r2, [r1, r2]
 80008e6:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80008e8:	4a82      	ldr	r2, [pc, #520]	; (8000af4 <HAL_RCC_OscConfig+0x298>)
 80008ea:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 80008ec:	4b82      	ldr	r3, [pc, #520]	; (8000af8 <HAL_RCC_OscConfig+0x29c>)
 80008ee:	6818      	ldr	r0, [r3, #0]
 80008f0:	f7ff fdbe 	bl	8000470 <HAL_InitTick>
        if(status != HAL_OK)
 80008f4:	2800      	cmp	r0, #0
 80008f6:	d12f      	bne.n	8000958 <HAL_RCC_OscConfig+0xfc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80008f8:	6823      	ldr	r3, [r4, #0]
 80008fa:	0718      	lsls	r0, r3, #28
 80008fc:	f100 80d3 	bmi.w	8000aa6 <HAL_RCC_OscConfig+0x24a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000900:	6823      	ldr	r3, [r4, #0]
 8000902:	0759      	lsls	r1, r3, #29
 8000904:	f100 8100 	bmi.w	8000b08 <HAL_RCC_OscConfig+0x2ac>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000908:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800090a:	2800      	cmp	r0, #0
 800090c:	f040 816a 	bne.w	8000be4 <HAL_RCC_OscConfig+0x388>
  return HAL_OK;
 8000910:	2000      	movs	r0, #0
 8000912:	e021      	b.n	8000958 <HAL_RCC_OscConfig+0xfc>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000914:	2e08      	cmp	r6, #8
 8000916:	d002      	beq.n	800091e <HAL_RCC_OscConfig+0xc2>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000918:	2e0c      	cmp	r6, #12
 800091a:	d107      	bne.n	800092c <HAL_RCC_OscConfig+0xd0>
 800091c:	b137      	cbz	r7, 800092c <HAL_RCC_OscConfig+0xd0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	039a      	lsls	r2, r3, #14
 8000922:	d5ab      	bpl.n	800087c <HAL_RCC_OscConfig+0x20>
 8000924:	6863      	ldr	r3, [r4, #4]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d1a8      	bne.n	800087c <HAL_RCC_OscConfig+0x20>
 800092a:	e79b      	b.n	8000864 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800092c:	6863      	ldr	r3, [r4, #4]
 800092e:	4d6f      	ldr	r5, [pc, #444]	; (8000aec <HAL_RCC_OscConfig+0x290>)
 8000930:	2b01      	cmp	r3, #1
 8000932:	d114      	bne.n	800095e <HAL_RCC_OscConfig+0x102>
 8000934:	682b      	ldr	r3, [r5, #0]
 8000936:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800093a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800093c:	f7ff fdda 	bl	80004f4 <HAL_GetTick>
 8000940:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000942:	4d6a      	ldr	r5, [pc, #424]	; (8000aec <HAL_RCC_OscConfig+0x290>)
 8000944:	682b      	ldr	r3, [r5, #0]
 8000946:	039b      	lsls	r3, r3, #14
 8000948:	d498      	bmi.n	800087c <HAL_RCC_OscConfig+0x20>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800094a:	f7ff fdd3 	bl	80004f4 <HAL_GetTick>
 800094e:	eba0 0008 	sub.w	r0, r0, r8
 8000952:	2864      	cmp	r0, #100	; 0x64
 8000954:	d9f6      	bls.n	8000944 <HAL_RCC_OscConfig+0xe8>
            return HAL_TIMEOUT;
 8000956:	2003      	movs	r0, #3
}
 8000958:	b003      	add	sp, #12
 800095a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800095e:	b9ab      	cbnz	r3, 800098c <HAL_RCC_OscConfig+0x130>
 8000960:	682b      	ldr	r3, [r5, #0]
 8000962:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000966:	602b      	str	r3, [r5, #0]
 8000968:	682b      	ldr	r3, [r5, #0]
 800096a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800096e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000970:	f7ff fdc0 	bl	80004f4 <HAL_GetTick>
 8000974:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000976:	682b      	ldr	r3, [r5, #0]
 8000978:	0398      	lsls	r0, r3, #14
 800097a:	f57f af7f 	bpl.w	800087c <HAL_RCC_OscConfig+0x20>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800097e:	f7ff fdb9 	bl	80004f4 <HAL_GetTick>
 8000982:	eba0 0008 	sub.w	r0, r0, r8
 8000986:	2864      	cmp	r0, #100	; 0x64
 8000988:	d9f5      	bls.n	8000976 <HAL_RCC_OscConfig+0x11a>
 800098a:	e7e4      	b.n	8000956 <HAL_RCC_OscConfig+0xfa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800098c:	2b05      	cmp	r3, #5
 800098e:	682b      	ldr	r3, [r5, #0]
 8000990:	d103      	bne.n	800099a <HAL_RCC_OscConfig+0x13e>
 8000992:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000996:	602b      	str	r3, [r5, #0]
 8000998:	e7cc      	b.n	8000934 <HAL_RCC_OscConfig+0xd8>
 800099a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800099e:	602b      	str	r3, [r5, #0]
 80009a0:	682b      	ldr	r3, [r5, #0]
 80009a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009a6:	e7c8      	b.n	800093a <HAL_RCC_OscConfig+0xde>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80009a8:	2e04      	cmp	r6, #4
 80009aa:	d002      	beq.n	80009b2 <HAL_RCC_OscConfig+0x156>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80009ac:	2e0c      	cmp	r6, #12
 80009ae:	d110      	bne.n	80009d2 <HAL_RCC_OscConfig+0x176>
 80009b0:	b97f      	cbnz	r7, 80009d2 <HAL_RCC_OscConfig+0x176>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009b2:	4b4e      	ldr	r3, [pc, #312]	; (8000aec <HAL_RCC_OscConfig+0x290>)
 80009b4:	681a      	ldr	r2, [r3, #0]
 80009b6:	0791      	lsls	r1, r2, #30
 80009b8:	d503      	bpl.n	80009c2 <HAL_RCC_OscConfig+0x166>
 80009ba:	68e2      	ldr	r2, [r4, #12]
 80009bc:	2a01      	cmp	r2, #1
 80009be:	f47f af51 	bne.w	8000864 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009c2:	685a      	ldr	r2, [r3, #4]
 80009c4:	6921      	ldr	r1, [r4, #16]
 80009c6:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 80009ca:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80009ce:	605a      	str	r2, [r3, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009d0:	e758      	b.n	8000884 <HAL_RCC_OscConfig+0x28>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80009d2:	68e2      	ldr	r2, [r4, #12]
 80009d4:	4b49      	ldr	r3, [pc, #292]	; (8000afc <HAL_RCC_OscConfig+0x2a0>)
 80009d6:	b1b2      	cbz	r2, 8000a06 <HAL_RCC_OscConfig+0x1aa>
        __HAL_RCC_HSI_ENABLE();
 80009d8:	2201      	movs	r2, #1
 80009da:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009dc:	f7ff fd8a 	bl	80004f4 <HAL_GetTick>
 80009e0:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80009e2:	4d42      	ldr	r5, [pc, #264]	; (8000aec <HAL_RCC_OscConfig+0x290>)
 80009e4:	682b      	ldr	r3, [r5, #0]
 80009e6:	079a      	lsls	r2, r3, #30
 80009e8:	d507      	bpl.n	80009fa <HAL_RCC_OscConfig+0x19e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009ea:	686b      	ldr	r3, [r5, #4]
 80009ec:	6922      	ldr	r2, [r4, #16]
 80009ee:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80009f2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80009f6:	606b      	str	r3, [r5, #4]
 80009f8:	e744      	b.n	8000884 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009fa:	f7ff fd7b 	bl	80004f4 <HAL_GetTick>
 80009fe:	1bc0      	subs	r0, r0, r7
 8000a00:	2802      	cmp	r0, #2
 8000a02:	d9ef      	bls.n	80009e4 <HAL_RCC_OscConfig+0x188>
 8000a04:	e7a7      	b.n	8000956 <HAL_RCC_OscConfig+0xfa>
        __HAL_RCC_HSI_DISABLE();
 8000a06:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a08:	f7ff fd74 	bl	80004f4 <HAL_GetTick>
 8000a0c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000a0e:	4d37      	ldr	r5, [pc, #220]	; (8000aec <HAL_RCC_OscConfig+0x290>)
 8000a10:	682b      	ldr	r3, [r5, #0]
 8000a12:	079b      	lsls	r3, r3, #30
 8000a14:	f57f af36 	bpl.w	8000884 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a18:	f7ff fd6c 	bl	80004f4 <HAL_GetTick>
 8000a1c:	1bc0      	subs	r0, r0, r7
 8000a1e:	2802      	cmp	r0, #2
 8000a20:	d9f6      	bls.n	8000a10 <HAL_RCC_OscConfig+0x1b4>
 8000a22:	e798      	b.n	8000956 <HAL_RCC_OscConfig+0xfa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000a24:	686b      	ldr	r3, [r5, #4]
 8000a26:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000a2a:	4303      	orrs	r3, r0
 8000a2c:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000a2e:	686b      	ldr	r3, [r5, #4]
 8000a30:	69e2      	ldr	r2, [r4, #28]
 8000a32:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000a36:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000a3a:	606b      	str	r3, [r5, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000a3c:	f7ff fece 	bl	80007dc <RCC_SetFlashLatencyFromMSIRange>
 8000a40:	2800      	cmp	r0, #0
 8000a42:	f43f af44 	beq.w	80008ce <HAL_RCC_OscConfig+0x72>
 8000a46:	e70d      	b.n	8000864 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000a48:	69a2      	ldr	r2, [r4, #24]
 8000a4a:	4b2d      	ldr	r3, [pc, #180]	; (8000b00 <HAL_RCC_OscConfig+0x2a4>)
 8000a4c:	b1e2      	cbz	r2, 8000a88 <HAL_RCC_OscConfig+0x22c>
        __HAL_RCC_MSI_ENABLE();
 8000a4e:	2201      	movs	r2, #1
 8000a50:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a52:	f7ff fd4f 	bl	80004f4 <HAL_GetTick>
 8000a56:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000a58:	4d24      	ldr	r5, [pc, #144]	; (8000aec <HAL_RCC_OscConfig+0x290>)
 8000a5a:	682b      	ldr	r3, [r5, #0]
 8000a5c:	059a      	lsls	r2, r3, #22
 8000a5e:	d50d      	bpl.n	8000a7c <HAL_RCC_OscConfig+0x220>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000a60:	686b      	ldr	r3, [r5, #4]
 8000a62:	6a22      	ldr	r2, [r4, #32]
 8000a64:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000a6c:	686b      	ldr	r3, [r5, #4]
 8000a6e:	69e2      	ldr	r2, [r4, #28]
 8000a70:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000a74:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000a78:	606b      	str	r3, [r5, #4]
 8000a7a:	e73d      	b.n	80008f8 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000a7c:	f7ff fd3a 	bl	80004f4 <HAL_GetTick>
 8000a80:	1bc0      	subs	r0, r0, r7
 8000a82:	2802      	cmp	r0, #2
 8000a84:	d9e9      	bls.n	8000a5a <HAL_RCC_OscConfig+0x1fe>
 8000a86:	e766      	b.n	8000956 <HAL_RCC_OscConfig+0xfa>
        __HAL_RCC_MSI_DISABLE();
 8000a88:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a8a:	f7ff fd33 	bl	80004f4 <HAL_GetTick>
 8000a8e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000a90:	4d16      	ldr	r5, [pc, #88]	; (8000aec <HAL_RCC_OscConfig+0x290>)
 8000a92:	682b      	ldr	r3, [r5, #0]
 8000a94:	059b      	lsls	r3, r3, #22
 8000a96:	f57f af2f 	bpl.w	80008f8 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000a9a:	f7ff fd2b 	bl	80004f4 <HAL_GetTick>
 8000a9e:	1bc0      	subs	r0, r0, r7
 8000aa0:	2802      	cmp	r0, #2
 8000aa2:	d9f6      	bls.n	8000a92 <HAL_RCC_OscConfig+0x236>
 8000aa4:	e757      	b.n	8000956 <HAL_RCC_OscConfig+0xfa>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000aa6:	6962      	ldr	r2, [r4, #20]
 8000aa8:	4b16      	ldr	r3, [pc, #88]	; (8000b04 <HAL_RCC_OscConfig+0x2a8>)
 8000aaa:	b17a      	cbz	r2, 8000acc <HAL_RCC_OscConfig+0x270>
      __HAL_RCC_LSI_ENABLE();
 8000aac:	2201      	movs	r2, #1
 8000aae:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000ab0:	f7ff fd20 	bl	80004f4 <HAL_GetTick>
 8000ab4:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000ab6:	4d0d      	ldr	r5, [pc, #52]	; (8000aec <HAL_RCC_OscConfig+0x290>)
 8000ab8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000aba:	079a      	lsls	r2, r3, #30
 8000abc:	f53f af20 	bmi.w	8000900 <HAL_RCC_OscConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ac0:	f7ff fd18 	bl	80004f4 <HAL_GetTick>
 8000ac4:	1bc0      	subs	r0, r0, r7
 8000ac6:	2802      	cmp	r0, #2
 8000ac8:	d9f6      	bls.n	8000ab8 <HAL_RCC_OscConfig+0x25c>
 8000aca:	e744      	b.n	8000956 <HAL_RCC_OscConfig+0xfa>
      __HAL_RCC_LSI_DISABLE();
 8000acc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000ace:	f7ff fd11 	bl	80004f4 <HAL_GetTick>
 8000ad2:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000ad4:	4d05      	ldr	r5, [pc, #20]	; (8000aec <HAL_RCC_OscConfig+0x290>)
 8000ad6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000ad8:	079b      	lsls	r3, r3, #30
 8000ada:	f57f af11 	bpl.w	8000900 <HAL_RCC_OscConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ade:	f7ff fd09 	bl	80004f4 <HAL_GetTick>
 8000ae2:	1bc0      	subs	r0, r0, r7
 8000ae4:	2802      	cmp	r0, #2
 8000ae6:	d9f6      	bls.n	8000ad6 <HAL_RCC_OscConfig+0x27a>
 8000ae8:	e735      	b.n	8000956 <HAL_RCC_OscConfig+0xfa>
 8000aea:	bf00      	nop
 8000aec:	40023800 	.word	0x40023800
 8000af0:	080015d4 	.word	0x080015d4
 8000af4:	20000008 	.word	0x20000008
 8000af8:	20000004 	.word	0x20000004
 8000afc:	42470000 	.word	0x42470000
 8000b00:	42470020 	.word	0x42470020
 8000b04:	42470680 	.word	0x42470680
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b08:	4b60      	ldr	r3, [pc, #384]	; (8000c8c <HAL_RCC_OscConfig+0x430>)
 8000b0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b0c:	00d0      	lsls	r0, r2, #3
 8000b0e:	d429      	bmi.n	8000b64 <HAL_RCC_OscConfig+0x308>
      pwrclkchanged = SET;
 8000b10:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000b12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b14:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000b18:	625a      	str	r2, [r3, #36]	; 0x24
 8000b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b20:	9301      	str	r3, [sp, #4]
 8000b22:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b24:	4d5a      	ldr	r5, [pc, #360]	; (8000c90 <HAL_RCC_OscConfig+0x434>)
 8000b26:	682b      	ldr	r3, [r5, #0]
 8000b28:	05d9      	lsls	r1, r3, #23
 8000b2a:	d51d      	bpl.n	8000b68 <HAL_RCC_OscConfig+0x30c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b2c:	68a3      	ldr	r3, [r4, #8]
 8000b2e:	4d57      	ldr	r5, [pc, #348]	; (8000c8c <HAL_RCC_OscConfig+0x430>)
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d12a      	bne.n	8000b8a <HAL_RCC_OscConfig+0x32e>
 8000b34:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000b36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b3a:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000b3c:	f7ff fcda 	bl	80004f4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b40:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000b44:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000b46:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8000c8c <HAL_RCC_OscConfig+0x430>
 8000b4a:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 8000b4e:	059b      	lsls	r3, r3, #22
 8000b50:	d541      	bpl.n	8000bd6 <HAL_RCC_OscConfig+0x37a>
    if(pwrclkchanged == SET)
 8000b52:	2f00      	cmp	r7, #0
 8000b54:	f43f aed8 	beq.w	8000908 <HAL_RCC_OscConfig+0xac>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b58:	4a4c      	ldr	r2, [pc, #304]	; (8000c8c <HAL_RCC_OscConfig+0x430>)
 8000b5a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000b5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b60:	6253      	str	r3, [r2, #36]	; 0x24
 8000b62:	e6d1      	b.n	8000908 <HAL_RCC_OscConfig+0xac>
    FlagStatus       pwrclkchanged = RESET;
 8000b64:	2700      	movs	r7, #0
 8000b66:	e7dd      	b.n	8000b24 <HAL_RCC_OscConfig+0x2c8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b68:	682b      	ldr	r3, [r5, #0]
 8000b6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b6e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000b70:	f7ff fcc0 	bl	80004f4 <HAL_GetTick>
 8000b74:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b76:	682b      	ldr	r3, [r5, #0]
 8000b78:	05da      	lsls	r2, r3, #23
 8000b7a:	d4d7      	bmi.n	8000b2c <HAL_RCC_OscConfig+0x2d0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b7c:	f7ff fcba 	bl	80004f4 <HAL_GetTick>
 8000b80:	eba0 0008 	sub.w	r0, r0, r8
 8000b84:	2864      	cmp	r0, #100	; 0x64
 8000b86:	d9f6      	bls.n	8000b76 <HAL_RCC_OscConfig+0x31a>
 8000b88:	e6e5      	b.n	8000956 <HAL_RCC_OscConfig+0xfa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b8a:	b9b3      	cbnz	r3, 8000bba <HAL_RCC_OscConfig+0x35e>
 8000b8c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b8e:	f241 3988 	movw	r9, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000b96:	636b      	str	r3, [r5, #52]	; 0x34
 8000b98:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000b9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000b9e:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000ba0:	f7ff fca8 	bl	80004f4 <HAL_GetTick>
 8000ba4:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000ba6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000ba8:	0598      	lsls	r0, r3, #22
 8000baa:	d5d2      	bpl.n	8000b52 <HAL_RCC_OscConfig+0x2f6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bac:	f7ff fca2 	bl	80004f4 <HAL_GetTick>
 8000bb0:	eba0 0008 	sub.w	r0, r0, r8
 8000bb4:	4548      	cmp	r0, r9
 8000bb6:	d9f6      	bls.n	8000ba6 <HAL_RCC_OscConfig+0x34a>
 8000bb8:	e6cd      	b.n	8000956 <HAL_RCC_OscConfig+0xfa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000bba:	2b05      	cmp	r3, #5
 8000bbc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000bbe:	d103      	bne.n	8000bc8 <HAL_RCC_OscConfig+0x36c>
 8000bc0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bc4:	636b      	str	r3, [r5, #52]	; 0x34
 8000bc6:	e7b5      	b.n	8000b34 <HAL_RCC_OscConfig+0x2d8>
 8000bc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000bcc:	636b      	str	r3, [r5, #52]	; 0x34
 8000bce:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000bd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000bd4:	e7b1      	b.n	8000b3a <HAL_RCC_OscConfig+0x2de>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bd6:	f7ff fc8d 	bl	80004f4 <HAL_GetTick>
 8000bda:	eba0 0009 	sub.w	r0, r0, r9
 8000bde:	42a8      	cmp	r0, r5
 8000be0:	d9b3      	bls.n	8000b4a <HAL_RCC_OscConfig+0x2ee>
 8000be2:	e6b8      	b.n	8000956 <HAL_RCC_OscConfig+0xfa>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000be4:	2e0c      	cmp	r6, #12
 8000be6:	d039      	beq.n	8000c5c <HAL_RCC_OscConfig+0x400>
 8000be8:	2300      	movs	r3, #0
 8000bea:	4d2a      	ldr	r5, [pc, #168]	; (8000c94 <HAL_RCC_OscConfig+0x438>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000bec:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000bee:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000bf0:	d126      	bne.n	8000c40 <HAL_RCC_OscConfig+0x3e4>
        tickstart = HAL_GetTick();
 8000bf2:	f7ff fc7f 	bl	80004f4 <HAL_GetTick>
 8000bf6:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000bf8:	4e24      	ldr	r6, [pc, #144]	; (8000c8c <HAL_RCC_OscConfig+0x430>)
 8000bfa:	6833      	ldr	r3, [r6, #0]
 8000bfc:	0199      	lsls	r1, r3, #6
 8000bfe:	d419      	bmi.n	8000c34 <HAL_RCC_OscConfig+0x3d8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c00:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000c02:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000c04:	68b2      	ldr	r2, [r6, #8]
 8000c06:	430b      	orrs	r3, r1
 8000c08:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	6b22      	ldr	r2, [r4, #48]	; 0x30
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000c10:	4c1e      	ldr	r4, [pc, #120]	; (8000c8c <HAL_RCC_OscConfig+0x430>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c12:	4313      	orrs	r3, r2
 8000c14:	60b3      	str	r3, [r6, #8]
        __HAL_RCC_PLL_ENABLE();
 8000c16:	2301      	movs	r3, #1
 8000c18:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000c1a:	f7ff fc6b 	bl	80004f4 <HAL_GetTick>
 8000c1e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000c20:	6823      	ldr	r3, [r4, #0]
 8000c22:	019a      	lsls	r2, r3, #6
 8000c24:	f53f ae74 	bmi.w	8000910 <HAL_RCC_OscConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c28:	f7ff fc64 	bl	80004f4 <HAL_GetTick>
 8000c2c:	1b40      	subs	r0, r0, r5
 8000c2e:	2802      	cmp	r0, #2
 8000c30:	d9f6      	bls.n	8000c20 <HAL_RCC_OscConfig+0x3c4>
 8000c32:	e690      	b.n	8000956 <HAL_RCC_OscConfig+0xfa>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c34:	f7ff fc5e 	bl	80004f4 <HAL_GetTick>
 8000c38:	1bc0      	subs	r0, r0, r7
 8000c3a:	2802      	cmp	r0, #2
 8000c3c:	d9dd      	bls.n	8000bfa <HAL_RCC_OscConfig+0x39e>
 8000c3e:	e68a      	b.n	8000956 <HAL_RCC_OscConfig+0xfa>
        tickstart = HAL_GetTick();
 8000c40:	f7ff fc58 	bl	80004f4 <HAL_GetTick>
 8000c44:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000c46:	4c11      	ldr	r4, [pc, #68]	; (8000c8c <HAL_RCC_OscConfig+0x430>)
 8000c48:	6823      	ldr	r3, [r4, #0]
 8000c4a:	019b      	lsls	r3, r3, #6
 8000c4c:	f57f ae60 	bpl.w	8000910 <HAL_RCC_OscConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c50:	f7ff fc50 	bl	80004f4 <HAL_GetTick>
 8000c54:	1b40      	subs	r0, r0, r5
 8000c56:	2802      	cmp	r0, #2
 8000c58:	d9f6      	bls.n	8000c48 <HAL_RCC_OscConfig+0x3ec>
 8000c5a:	e67c      	b.n	8000956 <HAL_RCC_OscConfig+0xfa>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000c5c:	2801      	cmp	r0, #1
 8000c5e:	f43f ae7b 	beq.w	8000958 <HAL_RCC_OscConfig+0xfc>
        pll_config = RCC->CFGR;
 8000c62:	4b0a      	ldr	r3, [pc, #40]	; (8000c8c <HAL_RCC_OscConfig+0x430>)
 8000c64:	6898      	ldr	r0, [r3, #8]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000c68:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	f47f adf9 	bne.w	8000864 <HAL_RCC_OscConfig+0x8>
 8000c72:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000c74:	f400 1370 	and.w	r3, r0, #3932160	; 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	f47f adf3 	bne.w	8000864 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000c7e:	6b23      	ldr	r3, [r4, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8000c80:	f400 0040 	and.w	r0, r0, #12582912	; 0xc00000
    return HAL_ERROR;
 8000c84:	1ac0      	subs	r0, r0, r3
 8000c86:	bf18      	it	ne
 8000c88:	2001      	movne	r0, #1
 8000c8a:	e665      	b.n	8000958 <HAL_RCC_OscConfig+0xfc>
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	40007000 	.word	0x40007000
 8000c94:	42470060 	.word	0x42470060

08000c98 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8000c98:	4a12      	ldr	r2, [pc, #72]	; (8000ce4 <HAL_RCC_GetSysClockFreq+0x4c>)
 8000c9a:	6893      	ldr	r3, [r2, #8]
  switch (tmpreg & RCC_CFGR_SWS)
 8000c9c:	f003 010c 	and.w	r1, r3, #12
 8000ca0:	2908      	cmp	r1, #8
 8000ca2:	d005      	beq.n	8000cb0 <HAL_RCC_GetSysClockFreq+0x18>
 8000ca4:	290c      	cmp	r1, #12
 8000ca6:	d005      	beq.n	8000cb4 <HAL_RCC_GetSysClockFreq+0x1c>
 8000ca8:	2904      	cmp	r1, #4
 8000caa:	d113      	bne.n	8000cd4 <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = HSI_VALUE;
 8000cac:	480e      	ldr	r0, [pc, #56]	; (8000ce8 <HAL_RCC_GetSysClockFreq+0x50>)
}
 8000cae:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8000cb0:	480e      	ldr	r0, [pc, #56]	; (8000cec <HAL_RCC_GetSysClockFreq+0x54>)
 8000cb2:	4770      	bx	lr
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8000cb4:	480e      	ldr	r0, [pc, #56]	; (8000cf0 <HAL_RCC_GetSysClockFreq+0x58>)
 8000cb6:	f3c3 4183 	ubfx	r1, r3, #18, #4
 8000cba:	5c41      	ldrb	r1, [r0, r1]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8000cbc:	f3c3 5081 	ubfx	r0, r3, #22, #2
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000cc0:	6893      	ldr	r3, [r2, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8000cc2:	3001      	adds	r0, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000cc4:	03db      	lsls	r3, r3, #15
        pllvco = (HSE_VALUE * pllm) / plld;
 8000cc6:	bf4c      	ite	mi
 8000cc8:	4b08      	ldrmi	r3, [pc, #32]	; (8000cec <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (HSI_VALUE * pllm) / plld;
 8000cca:	4b07      	ldrpl	r3, [pc, #28]	; (8000ce8 <HAL_RCC_GetSysClockFreq+0x50>)
 8000ccc:	434b      	muls	r3, r1
 8000cce:	fbb3 f0f0 	udiv	r0, r3, r0
 8000cd2:	4770      	bx	lr
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8000cd4:	6850      	ldr	r0, [r2, #4]
 8000cd6:	f3c0 3042 	ubfx	r0, r0, #13, #3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000cda:	1c43      	adds	r3, r0, #1
 8000cdc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000ce0:	4098      	lsls	r0, r3
 8000ce2:	4770      	bx	lr
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	00f42400 	.word	0x00f42400
 8000cec:	016e3600 	.word	0x016e3600
 8000cf0:	080015ec 	.word	0x080015ec

08000cf4 <HAL_RCC_ClockConfig>:
{
 8000cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000cf8:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	b910      	cbnz	r0, 8000d04 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000cfe:	2001      	movs	r0, #1
 8000d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000d04:	4b57      	ldr	r3, [pc, #348]	; (8000e64 <HAL_RCC_ClockConfig+0x170>)
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	f002 0201 	and.w	r2, r2, #1
 8000d0c:	428a      	cmp	r2, r1
 8000d0e:	d32a      	bcc.n	8000d66 <HAL_RCC_ClockConfig+0x72>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d10:	6822      	ldr	r2, [r4, #0]
 8000d12:	0796      	lsls	r6, r2, #30
 8000d14:	d438      	bmi.n	8000d88 <HAL_RCC_ClockConfig+0x94>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d16:	07d0      	lsls	r0, r2, #31
 8000d18:	d43e      	bmi.n	8000d98 <HAL_RCC_ClockConfig+0xa4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000d1a:	4b52      	ldr	r3, [pc, #328]	; (8000e64 <HAL_RCC_ClockConfig+0x170>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	f002 0201 	and.w	r2, r2, #1
 8000d22:	4295      	cmp	r5, r2
 8000d24:	f0c0 808d 	bcc.w	8000e42 <HAL_RCC_ClockConfig+0x14e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d28:	6822      	ldr	r2, [r4, #0]
 8000d2a:	0751      	lsls	r1, r2, #29
 8000d2c:	f100 8092 	bmi.w	8000e54 <HAL_RCC_ClockConfig+0x160>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d30:	0713      	lsls	r3, r2, #28
 8000d32:	d507      	bpl.n	8000d44 <HAL_RCC_ClockConfig+0x50>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000d34:	4a4c      	ldr	r2, [pc, #304]	; (8000e68 <HAL_RCC_ClockConfig+0x174>)
 8000d36:	6921      	ldr	r1, [r4, #16]
 8000d38:	6893      	ldr	r3, [r2, #8]
 8000d3a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000d3e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000d42:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000d44:	f7ff ffa8 	bl	8000c98 <HAL_RCC_GetSysClockFreq>
}
 8000d48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000d4c:	4b46      	ldr	r3, [pc, #280]	; (8000e68 <HAL_RCC_ClockConfig+0x174>)
 8000d4e:	4a47      	ldr	r2, [pc, #284]	; (8000e6c <HAL_RCC_ClockConfig+0x178>)
 8000d50:	689b      	ldr	r3, [r3, #8]
 8000d52:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000d56:	5cd3      	ldrb	r3, [r2, r3]
 8000d58:	40d8      	lsrs	r0, r3
 8000d5a:	4b45      	ldr	r3, [pc, #276]	; (8000e70 <HAL_RCC_ClockConfig+0x17c>)
 8000d5c:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8000d5e:	4b45      	ldr	r3, [pc, #276]	; (8000e74 <HAL_RCC_ClockConfig+0x180>)
 8000d60:	6818      	ldr	r0, [r3, #0]
 8000d62:	f7ff bb85 	b.w	8000470 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d66:	2901      	cmp	r1, #1
 8000d68:	bf02      	ittt	eq
 8000d6a:	681a      	ldreq	r2, [r3, #0]
 8000d6c:	f042 0204 	orreq.w	r2, r2, #4
 8000d70:	601a      	streq	r2, [r3, #0]
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	f022 0201 	bic.w	r2, r2, #1
 8000d78:	430a      	orrs	r2, r1
 8000d7a:	601a      	str	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	4299      	cmp	r1, r3
 8000d84:	d1bb      	bne.n	8000cfe <HAL_RCC_ClockConfig+0xa>
 8000d86:	e7c3      	b.n	8000d10 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d88:	4937      	ldr	r1, [pc, #220]	; (8000e68 <HAL_RCC_ClockConfig+0x174>)
 8000d8a:	68a0      	ldr	r0, [r4, #8]
 8000d8c:	688b      	ldr	r3, [r1, #8]
 8000d8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000d92:	4303      	orrs	r3, r0
 8000d94:	608b      	str	r3, [r1, #8]
 8000d96:	e7be      	b.n	8000d16 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d98:	6861      	ldr	r1, [r4, #4]
 8000d9a:	4b33      	ldr	r3, [pc, #204]	; (8000e68 <HAL_RCC_ClockConfig+0x174>)
 8000d9c:	2902      	cmp	r1, #2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000d9e:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000da0:	d11d      	bne.n	8000dde <HAL_RCC_ClockConfig+0xea>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000da2:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000da6:	d0aa      	beq.n	8000cfe <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000da8:	689a      	ldr	r2, [r3, #8]
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000daa:	4f2f      	ldr	r7, [pc, #188]	; (8000e68 <HAL_RCC_ClockConfig+0x174>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000dac:	f022 0203 	bic.w	r2, r2, #3
 8000db0:	430a      	orrs	r2, r1
 8000db2:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000db4:	f7ff fb9e 	bl	80004f4 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000db8:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8000dba:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000dbc:	2b02      	cmp	r3, #2
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000dbe:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000dc2:	d119      	bne.n	8000df8 <HAL_RCC_ClockConfig+0x104>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	f003 030c 	and.w	r3, r3, #12
 8000dca:	2b08      	cmp	r3, #8
 8000dcc:	d0a5      	beq.n	8000d1a <HAL_RCC_ClockConfig+0x26>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000dce:	f7ff fb91 	bl	80004f4 <HAL_GetTick>
 8000dd2:	1b80      	subs	r0, r0, r6
 8000dd4:	4540      	cmp	r0, r8
 8000dd6:	d9f5      	bls.n	8000dc4 <HAL_RCC_ClockConfig+0xd0>
          return HAL_TIMEOUT;
 8000dd8:	2003      	movs	r0, #3
 8000dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000dde:	2903      	cmp	r1, #3
 8000de0:	d102      	bne.n	8000de8 <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000de2:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000de6:	e7de      	b.n	8000da6 <HAL_RCC_ClockConfig+0xb2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000de8:	2901      	cmp	r1, #1
 8000dea:	d102      	bne.n	8000df2 <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000dec:	f012 0f02 	tst.w	r2, #2
 8000df0:	e7d9      	b.n	8000da6 <HAL_RCC_ClockConfig+0xb2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000df2:	f412 7f00 	tst.w	r2, #512	; 0x200
 8000df6:	e7d6      	b.n	8000da6 <HAL_RCC_ClockConfig+0xb2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000df8:	2b03      	cmp	r3, #3
 8000dfa:	d10a      	bne.n	8000e12 <HAL_RCC_ClockConfig+0x11e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	f003 030c 	and.w	r3, r3, #12
 8000e02:	2b0c      	cmp	r3, #12
 8000e04:	d089      	beq.n	8000d1a <HAL_RCC_ClockConfig+0x26>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e06:	f7ff fb75 	bl	80004f4 <HAL_GetTick>
 8000e0a:	1b80      	subs	r0, r0, r6
 8000e0c:	4540      	cmp	r0, r8
 8000e0e:	d9f5      	bls.n	8000dfc <HAL_RCC_ClockConfig+0x108>
 8000e10:	e7e2      	b.n	8000dd8 <HAL_RCC_ClockConfig+0xe4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d110      	bne.n	8000e38 <HAL_RCC_ClockConfig+0x144>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	f003 030c 	and.w	r3, r3, #12
 8000e1c:	2b04      	cmp	r3, #4
 8000e1e:	f43f af7c 	beq.w	8000d1a <HAL_RCC_ClockConfig+0x26>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e22:	f7ff fb67 	bl	80004f4 <HAL_GetTick>
 8000e26:	1b80      	subs	r0, r0, r6
 8000e28:	4540      	cmp	r0, r8
 8000e2a:	d9f4      	bls.n	8000e16 <HAL_RCC_ClockConfig+0x122>
 8000e2c:	e7d4      	b.n	8000dd8 <HAL_RCC_ClockConfig+0xe4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e2e:	f7ff fb61 	bl	80004f4 <HAL_GetTick>
 8000e32:	1b80      	subs	r0, r0, r6
 8000e34:	4540      	cmp	r0, r8
 8000e36:	d8cf      	bhi.n	8000dd8 <HAL_RCC_ClockConfig+0xe4>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	f013 0f0c 	tst.w	r3, #12
 8000e3e:	d1f6      	bne.n	8000e2e <HAL_RCC_ClockConfig+0x13a>
 8000e40:	e76b      	b.n	8000d1a <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	f022 0201 	bic.w	r2, r2, #1
 8000e48:	601a      	str	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	07da      	lsls	r2, r3, #31
 8000e4e:	f53f af56 	bmi.w	8000cfe <HAL_RCC_ClockConfig+0xa>
 8000e52:	e769      	b.n	8000d28 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e54:	4904      	ldr	r1, [pc, #16]	; (8000e68 <HAL_RCC_ClockConfig+0x174>)
 8000e56:	68e0      	ldr	r0, [r4, #12]
 8000e58:	688b      	ldr	r3, [r1, #8]
 8000e5a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e5e:	4303      	orrs	r3, r0
 8000e60:	608b      	str	r3, [r1, #8]
 8000e62:	e765      	b.n	8000d30 <HAL_RCC_ClockConfig+0x3c>
 8000e64:	40023c00 	.word	0x40023c00
 8000e68:	40023800 	.word	0x40023800
 8000e6c:	080015d4 	.word	0x080015d4
 8000e70:	20000008 	.word	0x20000008
 8000e74:	20000004 	.word	0x20000004

08000e78 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000e78:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <HAL_RCC_GetPCLK1Freq+0x14>)
 8000e7a:	4a05      	ldr	r2, [pc, #20]	; (8000e90 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000e7c:	689b      	ldr	r3, [r3, #8]
 8000e7e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000e82:	5cd3      	ldrb	r3, [r2, r3]
 8000e84:	4a03      	ldr	r2, [pc, #12]	; (8000e94 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000e86:	6810      	ldr	r0, [r2, #0]
}
 8000e88:	40d8      	lsrs	r0, r3
 8000e8a:	4770      	bx	lr
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	080015e4 	.word	0x080015e4
 8000e94:	20000008 	.word	0x20000008

08000e98 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000e98:	4b04      	ldr	r3, [pc, #16]	; (8000eac <HAL_RCC_GetPCLK2Freq+0x14>)
 8000e9a:	4a05      	ldr	r2, [pc, #20]	; (8000eb0 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000e9c:	689b      	ldr	r3, [r3, #8]
 8000e9e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000ea2:	5cd3      	ldrb	r3, [r2, r3]
 8000ea4:	4a03      	ldr	r2, [pc, #12]	; (8000eb4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000ea6:	6810      	ldr	r0, [r2, #0]
}
 8000ea8:	40d8      	lsrs	r0, r3
 8000eaa:	4770      	bx	lr
 8000eac:	40023800 	.word	0x40023800
 8000eb0:	080015e4 	.word	0x080015e4
 8000eb4:	20000008 	.word	0x20000008

08000eb8 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8000eb8:	6803      	ldr	r3, [r0, #0]
 8000eba:	68da      	ldr	r2, [r3, #12]
 8000ebc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8000ec0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000ec2:	695a      	ldr	r2, [r3, #20]
 8000ec4:	f022 0201 	bic.w	r2, r2, #1
 8000ec8:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8000eca:	2320      	movs	r3, #32
 8000ecc:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8000ed0:	4770      	bx	lr
	...

08000ed4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000ed4:	b538      	push	{r3, r4, r5, lr}
 8000ed6:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000ed8:	6802      	ldr	r2, [r0, #0]
 8000eda:	68c1      	ldr	r1, [r0, #12]
 8000edc:	6913      	ldr	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000ede:	692c      	ldr	r4, [r5, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000ee0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ee4:	430b      	orrs	r3, r1
 8000ee6:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000ee8:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(huart->Instance->CR1,
 8000eea:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000eec:	4323      	orrs	r3, r4
 8000eee:	696c      	ldr	r4, [r5, #20]
 8000ef0:	69c0      	ldr	r0, [r0, #28]
 8000ef2:	4323      	orrs	r3, r4
  MODIFY_REG(huart->Instance->CR1,
 8000ef4:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8000ef8:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000efc:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8000efe:	430b      	orrs	r3, r1
 8000f00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000f02:	6953      	ldr	r3, [r2, #20]
 8000f04:	69a9      	ldr	r1, [r5, #24]
 8000f06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000f0a:	430b      	orrs	r3, r1

  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000f0c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000f10:	6153      	str	r3, [r2, #20]
 8000f12:	4b1f      	ldr	r3, [pc, #124]	; (8000f90 <UART_SetConfig+0xbc>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000f14:	d121      	bne.n	8000f5a <UART_SetConfig+0x86>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 8000f16:	429a      	cmp	r2, r3
 8000f18:	f04f 0419 	mov.w	r4, #25
 8000f1c:	d11a      	bne.n	8000f54 <UART_SetConfig+0x80>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8000f1e:	f7ff ffbb 	bl	8000e98 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8000f22:	4360      	muls	r0, r4
 8000f24:	686c      	ldr	r4, [r5, #4]
 8000f26:	6829      	ldr	r1, [r5, #0]
 8000f28:	0064      	lsls	r4, r4, #1
 8000f2a:	fbb0 f0f4 	udiv	r0, r0, r4
 8000f2e:	2464      	movs	r4, #100	; 0x64
 8000f30:	fbb0 f5f4 	udiv	r5, r0, r4
 8000f34:	fb04 0315 	mls	r3, r4, r5, r0
 8000f38:	00db      	lsls	r3, r3, #3
 8000f3a:	3332      	adds	r3, #50	; 0x32
 8000f3c:	fbb3 f3f4 	udiv	r3, r3, r4
 8000f40:	f003 0207 	and.w	r2, r3, #7
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 8000f4a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8000f4e:	4413      	add	r3, r2
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8000f50:	608b      	str	r3, [r1, #8]
 8000f52:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8000f54:	f7ff ff90 	bl	8000e78 <HAL_RCC_GetPCLK1Freq>
 8000f58:	e7e3      	b.n	8000f22 <UART_SetConfig+0x4e>
    if((huart->Instance == USART1))
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	f04f 0419 	mov.w	r4, #25
 8000f60:	d113      	bne.n	8000f8a <UART_SetConfig+0xb6>
      pclk = HAL_RCC_GetPCLK2Freq();
 8000f62:	f7ff ff99 	bl	8000e98 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8000f66:	4360      	muls	r0, r4
 8000f68:	686c      	ldr	r4, [r5, #4]
 8000f6a:	2264      	movs	r2, #100	; 0x64
 8000f6c:	00a4      	lsls	r4, r4, #2
 8000f6e:	fbb0 f0f4 	udiv	r0, r0, r4
 8000f72:	fbb0 f4f2 	udiv	r4, r0, r2
 8000f76:	fb02 0314 	mls	r3, r2, r4, r0
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	3332      	adds	r3, #50	; 0x32
 8000f7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8000f82:	6829      	ldr	r1, [r5, #0]
 8000f84:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8000f88:	e7e2      	b.n	8000f50 <UART_SetConfig+0x7c>
      pclk = HAL_RCC_GetPCLK1Freq();
 8000f8a:	f7ff ff75 	bl	8000e78 <HAL_RCC_GetPCLK1Freq>
 8000f8e:	e7ea      	b.n	8000f66 <UART_SetConfig+0x92>
 8000f90:	40013800 	.word	0x40013800

08000f94 <HAL_UART_Init>:
{
 8000f94:	b510      	push	{r4, lr}
  if (huart == NULL)
 8000f96:	4604      	mov	r4, r0
 8000f98:	b340      	cbz	r0, 8000fec <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8000f9a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000f9e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000fa2:	b91b      	cbnz	r3, 8000fac <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8000fa4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8000fa8:	f000 fa7c 	bl	80014a4 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8000fac:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8000fae:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8000fb0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8000fb4:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8000fb6:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8000fb8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000fbc:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8000fbe:	f7ff ff89 	bl	8000ed4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000fc2:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000fc4:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000fc6:	691a      	ldr	r2, [r3, #16]
 8000fc8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000fcc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000fce:	695a      	ldr	r2, [r3, #20]
 8000fd0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000fd4:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8000fd6:	68da      	ldr	r2, [r3, #12]
 8000fd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000fdc:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8000fde:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000fe0:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8000fe2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8000fe6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8000fea:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000fec:	2001      	movs	r0, #1
}
 8000fee:	bd10      	pop	{r4, pc}

08000ff0 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 8000ff0:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000ff4:	2b20      	cmp	r3, #32
 8000ff6:	d118      	bne.n	800102a <HAL_UART_Transmit_IT+0x3a>
    if ((pData == NULL) || (Size == 0U))
 8000ff8:	b1a9      	cbz	r1, 8001026 <HAL_UART_Transmit_IT+0x36>
 8000ffa:	b1a2      	cbz	r2, 8001026 <HAL_UART_Transmit_IT+0x36>
    __HAL_LOCK(huart);
 8000ffc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001000:	2b01      	cmp	r3, #1
 8001002:	d012      	beq.n	800102a <HAL_UART_Transmit_IT+0x3a>
    huart->TxXferCount = Size;
 8001004:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->TxXferSize = Size;
 8001006:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001008:	2300      	movs	r3, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800100a:	2221      	movs	r2, #33	; 0x21
    huart->pTxBuffPtr = pData;
 800100c:	6201      	str	r1, [r0, #32]
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800100e:	6801      	ldr	r1, [r0, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001010:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001012:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001016:	68ca      	ldr	r2, [r1, #12]
    __HAL_UNLOCK(huart);
 8001018:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800101c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001020:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 8001022:	4618      	mov	r0, r3
 8001024:	4770      	bx	lr
      return HAL_ERROR;
 8001026:	2001      	movs	r0, #1
 8001028:	4770      	bx	lr
    return HAL_BUSY;
 800102a:	2002      	movs	r0, #2
}
 800102c:	4770      	bx	lr

0800102e <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 800102e:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001032:	2b20      	cmp	r3, #32
 8001034:	d120      	bne.n	8001078 <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 8001036:	b1e9      	cbz	r1, 8001074 <HAL_UART_Receive_IT+0x46>
 8001038:	b1e2      	cbz	r2, 8001074 <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 800103a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800103e:	2b01      	cmp	r3, #1
 8001040:	d01a      	beq.n	8001078 <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 8001042:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 8001044:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001046:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001048:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800104a:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800104c:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001050:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 8001052:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001054:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 8001056:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800105a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800105e:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001060:	6951      	ldr	r1, [r2, #20]
    return HAL_OK;
 8001062:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001064:	f041 0101 	orr.w	r1, r1, #1
 8001068:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800106a:	68d1      	ldr	r1, [r2, #12]
 800106c:	f041 0120 	orr.w	r1, r1, #32
 8001070:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 8001072:	4770      	bx	lr
      return HAL_ERROR;
 8001074:	2001      	movs	r0, #1
 8001076:	4770      	bx	lr
    return HAL_BUSY;
 8001078:	2002      	movs	r0, #2
}
 800107a:	4770      	bx	lr

0800107c <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800107c:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8001080:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001082:	2b22      	cmp	r3, #34	; 0x22
 8001084:	d136      	bne.n	80010f4 <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001086:	6883      	ldr	r3, [r0, #8]
 8001088:	6901      	ldr	r1, [r0, #16]
 800108a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800108e:	6802      	ldr	r2, [r0, #0]
 8001090:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001092:	d123      	bne.n	80010dc <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001094:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001096:	b9e9      	cbnz	r1, 80010d4 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001098:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800109c:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 80010a0:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 80010a2:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 80010a4:	3c01      	subs	r4, #1
 80010a6:	b2a4      	uxth	r4, r4
 80010a8:	85c4      	strh	r4, [r0, #46]	; 0x2e
 80010aa:	b98c      	cbnz	r4, 80010d0 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80010ac:	6803      	ldr	r3, [r0, #0]
 80010ae:	68da      	ldr	r2, [r3, #12]
 80010b0:	f022 0220 	bic.w	r2, r2, #32
 80010b4:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80010b6:	68da      	ldr	r2, [r3, #12]
 80010b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010bc:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80010be:	695a      	ldr	r2, [r3, #20]
 80010c0:	f022 0201 	bic.w	r2, r2, #1
 80010c4:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80010c6:	2320      	movs	r3, #32
 80010c8:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 80010cc:	f7ff f8c6 	bl	800025c <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 80010d0:	2000      	movs	r0, #0
}
 80010d2:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80010d4:	b2d2      	uxtb	r2, r2
 80010d6:	f823 2b01 	strh.w	r2, [r3], #1
 80010da:	e7e1      	b.n	80010a0 <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 80010dc:	b921      	cbnz	r1, 80010e8 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80010de:	1c59      	adds	r1, r3, #1
 80010e0:	6852      	ldr	r2, [r2, #4]
 80010e2:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80010e4:	701a      	strb	r2, [r3, #0]
 80010e6:	e7dc      	b.n	80010a2 <UART_Receive_IT+0x26>
 80010e8:	6852      	ldr	r2, [r2, #4]
 80010ea:	1c59      	adds	r1, r3, #1
 80010ec:	6281      	str	r1, [r0, #40]	; 0x28
 80010ee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80010f2:	e7f7      	b.n	80010e4 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 80010f4:	2002      	movs	r0, #2
 80010f6:	bd10      	pop	{r4, pc}

080010f8 <HAL_UART_ErrorCallback>:
 80010f8:	4770      	bx	lr
	...

080010fc <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80010fc:	6803      	ldr	r3, [r0, #0]
{
 80010fe:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001100:	681a      	ldr	r2, [r3, #0]
{
 8001102:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8001104:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001106:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001108:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 800110a:	d107      	bne.n	800111c <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800110c:	0696      	lsls	r6, r2, #26
 800110e:	d55a      	bpl.n	80011c6 <HAL_UART_IRQHandler+0xca>
 8001110:	068d      	lsls	r5, r1, #26
 8001112:	d558      	bpl.n	80011c6 <HAL_UART_IRQHandler+0xca>
}
 8001114:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8001118:	f7ff bfb0 	b.w	800107c <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800111c:	f015 0501 	ands.w	r5, r5, #1
 8001120:	d102      	bne.n	8001128 <HAL_UART_IRQHandler+0x2c>
 8001122:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001126:	d04e      	beq.n	80011c6 <HAL_UART_IRQHandler+0xca>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001128:	07d3      	lsls	r3, r2, #31
 800112a:	d505      	bpl.n	8001138 <HAL_UART_IRQHandler+0x3c>
 800112c:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800112e:	bf42      	ittt	mi
 8001130:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8001132:	f043 0301 	orrmi.w	r3, r3, #1
 8001136:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001138:	0750      	lsls	r0, r2, #29
 800113a:	d504      	bpl.n	8001146 <HAL_UART_IRQHandler+0x4a>
 800113c:	b11d      	cbz	r5, 8001146 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800113e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001140:	f043 0302 	orr.w	r3, r3, #2
 8001144:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001146:	0793      	lsls	r3, r2, #30
 8001148:	d504      	bpl.n	8001154 <HAL_UART_IRQHandler+0x58>
 800114a:	b11d      	cbz	r5, 8001154 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800114c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800114e:	f043 0304 	orr.w	r3, r3, #4
 8001152:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001154:	0716      	lsls	r6, r2, #28
 8001156:	d504      	bpl.n	8001162 <HAL_UART_IRQHandler+0x66>
 8001158:	b11d      	cbz	r5, 8001162 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800115a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800115c:	f043 0308 	orr.w	r3, r3, #8
 8001160:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001162:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001164:	2b00      	cmp	r3, #0
 8001166:	d066      	beq.n	8001236 <HAL_UART_IRQHandler+0x13a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001168:	0695      	lsls	r5, r2, #26
 800116a:	d504      	bpl.n	8001176 <HAL_UART_IRQHandler+0x7a>
 800116c:	0688      	lsls	r0, r1, #26
 800116e:	d502      	bpl.n	8001176 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8001170:	4620      	mov	r0, r4
 8001172:	f7ff ff83 	bl	800107c <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001176:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8001178:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800117a:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800117c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800117e:	0711      	lsls	r1, r2, #28
 8001180:	d402      	bmi.n	8001188 <HAL_UART_IRQHandler+0x8c>
 8001182:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8001186:	d01a      	beq.n	80011be <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8001188:	f7ff fe96 	bl	8000eb8 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800118c:	6823      	ldr	r3, [r4, #0]
 800118e:	695a      	ldr	r2, [r3, #20]
 8001190:	0652      	lsls	r2, r2, #25
 8001192:	d510      	bpl.n	80011b6 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001194:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8001196:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001198:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800119c:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800119e:	b150      	cbz	r0, 80011b6 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80011a0:	4b25      	ldr	r3, [pc, #148]	; (8001238 <HAL_UART_IRQHandler+0x13c>)
 80011a2:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80011a4:	f7ff fa16 	bl	80005d4 <HAL_DMA_Abort_IT>
 80011a8:	2800      	cmp	r0, #0
 80011aa:	d044      	beq.n	8001236 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80011ac:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 80011ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80011b2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80011b4:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80011b6:	4620      	mov	r0, r4
 80011b8:	f7ff ff9e 	bl	80010f8 <HAL_UART_ErrorCallback>
 80011bc:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80011be:	f7ff ff9b 	bl	80010f8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80011c2:	63e5      	str	r5, [r4, #60]	; 0x3c
 80011c4:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80011c6:	0616      	lsls	r6, r2, #24
 80011c8:	d527      	bpl.n	800121a <HAL_UART_IRQHandler+0x11e>
 80011ca:	060d      	lsls	r5, r1, #24
 80011cc:	d525      	bpl.n	800121a <HAL_UART_IRQHandler+0x11e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80011ce:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80011d2:	2a21      	cmp	r2, #33	; 0x21
 80011d4:	d12f      	bne.n	8001236 <HAL_UART_IRQHandler+0x13a>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80011d6:	68a2      	ldr	r2, [r4, #8]
 80011d8:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80011dc:	6a22      	ldr	r2, [r4, #32]
 80011de:	d117      	bne.n	8001210 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80011e0:	8811      	ldrh	r1, [r2, #0]
 80011e2:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80011e6:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80011e8:	6921      	ldr	r1, [r4, #16]
 80011ea:	b979      	cbnz	r1, 800120c <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 80011ec:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 80011ee:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 80011f0:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80011f2:	3a01      	subs	r2, #1
 80011f4:	b292      	uxth	r2, r2
 80011f6:	84e2      	strh	r2, [r4, #38]	; 0x26
 80011f8:	b9ea      	cbnz	r2, 8001236 <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80011fa:	68da      	ldr	r2, [r3, #12]
 80011fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001200:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001202:	68da      	ldr	r2, [r3, #12]
 8001204:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 800120c:	3201      	adds	r2, #1
 800120e:	e7ee      	b.n	80011ee <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001210:	1c51      	adds	r1, r2, #1
 8001212:	6221      	str	r1, [r4, #32]
 8001214:	7812      	ldrb	r2, [r2, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	e7ea      	b.n	80011f0 <HAL_UART_IRQHandler+0xf4>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800121a:	0650      	lsls	r0, r2, #25
 800121c:	d50b      	bpl.n	8001236 <HAL_UART_IRQHandler+0x13a>
 800121e:	064a      	lsls	r2, r1, #25
 8001220:	d509      	bpl.n	8001236 <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001222:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8001224:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001226:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800122a:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800122c:	2320      	movs	r3, #32
 800122e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8001232:	f7ff f805 	bl	8000240 <HAL_UART_TxCpltCallback>
 8001236:	bd70      	pop	{r4, r5, r6, pc}
 8001238:	0800123d 	.word	0x0800123d

0800123c <UART_DMAAbortOnError>:
{
 800123c:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 800123e:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001240:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8001242:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001244:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8001246:	f7ff ff57 	bl	80010f8 <HAL_UART_ErrorCallback>
 800124a:	bd08      	pop	{r3, pc}

0800124c <HAL_UART_AbortReceive_IT>:
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800124c:	6803      	ldr	r3, [r0, #0]
{
 800124e:	b510      	push	{r4, lr}
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001250:	68da      	ldr	r2, [r3, #12]
{
 8001252:	4604      	mov	r4, r0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001254:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001258:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800125a:	695a      	ldr	r2, [r3, #20]
 800125c:	f022 0201 	bic.w	r2, r2, #1
 8001260:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001262:	695a      	ldr	r2, [r3, #20]
 8001264:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8001268:	d017      	beq.n	800129a <HAL_UART_AbortReceive_IT+0x4e>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800126a:	695a      	ldr	r2, [r3, #20]
 800126c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001270:	615a      	str	r2, [r3, #20]
    if (huart->hdmarx != NULL)
 8001272:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001274:	b153      	cbz	r3, 800128c <HAL_UART_AbortReceive_IT+0x40>
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8001276:	4a0a      	ldr	r2, [pc, #40]	; (80012a0 <HAL_UART_AbortReceive_IT+0x54>)
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001278:	4618      	mov	r0, r3
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800127a:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800127c:	f7ff f9aa 	bl	80005d4 <HAL_DMA_Abort_IT>
 8001280:	b110      	cbz	r0, 8001288 <HAL_UART_AbortReceive_IT+0x3c>
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001282:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001284:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001286:	4798      	blx	r3
}
 8001288:	2000      	movs	r0, #0
 800128a:	bd10      	pop	{r4, pc}
      huart->RxXferCount = 0x00U;
 800128c:	85c3      	strh	r3, [r0, #46]	; 0x2e
    huart->RxState = HAL_UART_STATE_READY;
 800128e:	2320      	movs	r3, #32
 8001290:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    HAL_UART_AbortReceiveCpltCallback(huart);
 8001294:	f7fe ffe8 	bl	8000268 <HAL_UART_AbortReceiveCpltCallback>
 8001298:	e7f6      	b.n	8001288 <HAL_UART_AbortReceive_IT+0x3c>
    huart->RxXferCount = 0x00U;
 800129a:	85c2      	strh	r2, [r0, #46]	; 0x2e
 800129c:	e7f7      	b.n	800128e <HAL_UART_AbortReceive_IT+0x42>
 800129e:	bf00      	nop
 80012a0:	080012a5 	.word	0x080012a5

080012a4 <UART_DMARxOnlyAbortCallback>:
{
 80012a4:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 80012a6:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80012a8:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 80012aa:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->RxState = HAL_UART_STATE_READY;
 80012ac:	2320      	movs	r3, #32
 80012ae:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  HAL_UART_AbortReceiveCpltCallback(huart);
 80012b2:	f7fe ffd9 	bl	8000268 <HAL_UART_AbortReceiveCpltCallback>
 80012b6:	bd08      	pop	{r3, pc}

080012b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012b8:	b510      	push	{r4, lr}
 80012ba:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	2214      	movs	r2, #20
 80012be:	2100      	movs	r1, #0
 80012c0:	a801      	add	r0, sp, #4
 80012c2:	f000 f973 	bl	80015ac <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c6:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <MX_GPIO_Init+0x48>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80012c8:	4c0e      	ldr	r4, [pc, #56]	; (8001304 <MX_GPIO_Init+0x4c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ca:	69da      	ldr	r2, [r3, #28]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80012cc:	4620      	mov	r0, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ce:	f042 0201 	orr.w	r2, r2, #1
 80012d2:	61da      	str	r2, [r3, #28]
 80012d4:	69db      	ldr	r3, [r3, #28]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80012d6:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d8:	f003 0301 	and.w	r3, r3, #1
 80012dc:	9300      	str	r3, [sp, #0]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80012de:	2120      	movs	r1, #32
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e0:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80012e2:	f7ff fa6f 	bl	80007c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80012e6:	2320      	movs	r3, #32
 80012e8:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ea:	2301      	movs	r3, #1
 80012ec:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f0:	a901      	add	r1, sp, #4
 80012f2:	4620      	mov	r0, r4
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f6:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f8:	f7ff f992 	bl	8000620 <HAL_GPIO_Init>

}
 80012fc:	b006      	add	sp, #24
 80012fe:	bd10      	pop	{r4, pc}
 8001300:	40023800 	.word	0x40023800
 8001304:	40020000 	.word	0x40020000

08001308 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001308:	b530      	push	{r4, r5, lr}
 800130a:	b093      	sub	sp, #76	; 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800130c:	2234      	movs	r2, #52	; 0x34
 800130e:	2100      	movs	r1, #0
 8001310:	a805      	add	r0, sp, #20
 8001312:	f000 f94b 	bl	80015ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001316:	2100      	movs	r1, #0
 8001318:	2214      	movs	r2, #20
 800131a:	4668      	mov	r0, sp
 800131c:	f000 f946 	bl	80015ac <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001320:	4a0e      	ldr	r2, [pc, #56]	; (800135c <SystemClock_Config+0x54>)
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001322:	2400      	movs	r4, #0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001324:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001326:	2501      	movs	r5, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001328:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800132c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001330:	6013      	str	r3, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001332:	2302      	movs	r3, #2
 8001334:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001336:	2310      	movs	r3, #16
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001338:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800133a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800133c:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800133e:	940e      	str	r4, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001340:	f7ff fa8c 	bl	800085c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001344:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001346:	4621      	mov	r1, r4
 8001348:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800134a:	e88d 0028 	stmia.w	sp, {r3, r5}
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800134e:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001350:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001352:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001354:	f7ff fcce 	bl	8000cf4 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001358:	b013      	add	sp, #76	; 0x4c
 800135a:	bd30      	pop	{r4, r5, pc}
 800135c:	40007000 	.word	0x40007000

08001360 <main>:
{
 8001360:	b510      	push	{r4, lr}
	uint32_t  totalBytesRead=0;
 8001362:	2400      	movs	r4, #0
{
 8001364:	b094      	sub	sp, #80	; 0x50
	uint32_t  totalBytesRead=0;
 8001366:	9401      	str	r4, [sp, #4]
	uint16_t lengthOfPDU=0,lengthOfResponseFrame=0;
 8001368:	f8ad 4000 	strh.w	r4, [sp]
 800136c:	f8ad 4002 	strh.w	r4, [sp, #2]
  HAL_Init();
 8001370:	f7ff f8a4 	bl	80004bc <HAL_Init>
  SystemClock_Config();
 8001374:	f7ff ffc8 	bl	8001308 <SystemClock_Config>
  MX_GPIO_Init();
 8001378:	f7ff ff9e 	bl	80012b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800137c:	f000 f874 	bl	8001468 <MX_USART2_UART_Init>
	  MBMESN_serialCommRead(pData,lengthOfData,&totalBytesRead);
 8001380:	aa01      	add	r2, sp, #4
 8001382:	2110      	movs	r1, #16
 8001384:	a802      	add	r0, sp, #8
	  totalBytesRead=0;
 8001386:	9401      	str	r4, [sp, #4]
	  MBMESN_serialCommRead(pData,lengthOfData,&totalBytesRead);
 8001388:	f7fe ff10 	bl	80001ac <MBMESN_serialCommRead>
		 if( HandleMBRequest(pData, (uint16_t)totalBytesRead,modbusPDU ,&lengthOfPDU) != MBMESN_SLAVE_DEVICE_ERROR){
 800138c:	466b      	mov	r3, sp
 800138e:	aa07      	add	r2, sp, #28
 8001390:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8001394:	a802      	add	r0, sp, #8
 8001396:	f7fe ff87 	bl	80002a8 <HandleMBRequest>
 800139a:	2803      	cmp	r0, #3
 800139c:	d0f0      	beq.n	8001380 <main+0x20>
			  BuildMBResponse(modbusPDU,lengthOfPDU, responseFrame, &lengthOfResponseFrame);
 800139e:	f8bd 1000 	ldrh.w	r1, [sp]
 80013a2:	f10d 0302 	add.w	r3, sp, #2
 80013a6:	aa0c      	add	r2, sp, #48	; 0x30
 80013a8:	a807      	add	r0, sp, #28
 80013aa:	f7fe ffbb 	bl	8000324 <BuildMBResponse>
			  MBMESN_serialCommWrite(responseFrame,lengthOfResponseFrame);
 80013ae:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 80013b2:	a80c      	add	r0, sp, #48	; 0x30
 80013b4:	f7fe fee2 	bl	800017c <MBMESN_serialCommWrite>
 80013b8:	e7e2      	b.n	8001380 <main+0x20>

080013ba <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013ba:	4770      	bx	lr

080013bc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80013bc:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <HAL_MspInit+0x40>)
{
 80013be:	b084      	sub	sp, #16
  __HAL_RCC_COMP_CLK_ENABLE();
 80013c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013c2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80013c6:	625a      	str	r2, [r3, #36]	; 0x24
 80013c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013ca:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80013ce:	9201      	str	r2, [sp, #4]
 80013d0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d2:	6a1a      	ldr	r2, [r3, #32]
 80013d4:	f042 0201 	orr.w	r2, r2, #1
 80013d8:	621a      	str	r2, [r3, #32]
 80013da:	6a1a      	ldr	r2, [r3, #32]
 80013dc:	f002 0201 	and.w	r2, r2, #1
 80013e0:	9202      	str	r2, [sp, #8]
 80013e2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013e6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80013ea:	625a      	str	r2, [r3, #36]	; 0x24
 80013ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f2:	9303      	str	r3, [sp, #12]
 80013f4:	9b03      	ldr	r3, [sp, #12]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013f6:	b004      	add	sp, #16
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	40023800 	.word	0x40023800

08001400 <NMI_Handler>:
 8001400:	4770      	bx	lr

08001402 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001402:	e7fe      	b.n	8001402 <HardFault_Handler>

08001404 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001404:	e7fe      	b.n	8001404 <MemManage_Handler>

08001406 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001406:	e7fe      	b.n	8001406 <BusFault_Handler>

08001408 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001408:	e7fe      	b.n	8001408 <UsageFault_Handler>

0800140a <SVC_Handler>:
 800140a:	4770      	bx	lr

0800140c <DebugMon_Handler>:
 800140c:	4770      	bx	lr

0800140e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800140e:	4770      	bx	lr

08001410 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001410:	f7ff b864 	b.w	80004dc <HAL_IncTick>

08001414 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001414:	4801      	ldr	r0, [pc, #4]	; (800141c <USART2_IRQHandler+0x8>)
 8001416:	f7ff be71 	b.w	80010fc <HAL_UART_IRQHandler>
 800141a:	bf00      	nop
 800141c:	20000038 	.word	0x20000038

08001420 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8001420:	4b0e      	ldr	r3, [pc, #56]	; (800145c <SystemInit+0x3c>)
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001428:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 800142a:	6899      	ldr	r1, [r3, #8]
 800142c:	4a0c      	ldr	r2, [pc, #48]	; (8001460 <SystemInit+0x40>)
 800142e:	400a      	ands	r2, r1
 8001430:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 8001438:	f022 1201 	bic.w	r2, r2, #65537	; 0x10001
 800143c:	601a      	str	r2, [r3, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001444:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8001446:	689a      	ldr	r2, [r3, #8]
 8001448:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 800144c:	609a      	str	r2, [r3, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 800144e:	2200      	movs	r2, #0
 8001450:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001452:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001456:	4b03      	ldr	r3, [pc, #12]	; (8001464 <SystemInit+0x44>)
 8001458:	609a      	str	r2, [r3, #8]
 800145a:	4770      	bx	lr
 800145c:	40023800 	.word	0x40023800
 8001460:	88ffc00c 	.word	0x88ffc00c
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001468:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 19200 ;
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800146a:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
 800146e:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
  huart2.Instance = USART2;
 8001472:	480a      	ldr	r0, [pc, #40]	; (800149c <MX_USART2_UART_Init+0x34>)
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001474:	4a0a      	ldr	r2, [pc, #40]	; (80014a0 <MX_USART2_UART_Init+0x38>)
 8001476:	e880 100c 	stmia.w	r0, {r2, r3, ip}
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_EVEN;
 800147a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  huart2.Init.StopBits = UART_STOPBITS_1;
 800147e:	2300      	movs	r3, #0
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001480:	6102      	str	r2, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001482:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001484:	60c3      	str	r3, [r0, #12]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001486:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001488:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800148a:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800148c:	f7ff fd82 	bl	8000f94 <HAL_UART_Init>
 8001490:	b118      	cbz	r0, 800149a <MX_USART2_UART_Init+0x32>
  {
    Error_Handler();
  }

}
 8001492:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001496:	f7ff bf90 	b.w	80013ba <Error_Handler>
 800149a:	bd08      	pop	{r3, pc}
 800149c:	20000038 	.word	0x20000038
 80014a0:	40004400 	.word	0x40004400

080014a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014a4:	b510      	push	{r4, lr}
 80014a6:	4604      	mov	r4, r0
 80014a8:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014aa:	2214      	movs	r2, #20
 80014ac:	2100      	movs	r1, #0
 80014ae:	a803      	add	r0, sp, #12
 80014b0:	f000 f87c 	bl	80015ac <memset>
  if(uartHandle->Instance==USART2)
 80014b4:	6822      	ldr	r2, [r4, #0]
 80014b6:	4b16      	ldr	r3, [pc, #88]	; (8001510 <HAL_UART_MspInit+0x6c>)
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d127      	bne.n	800150c <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014bc:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80014c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c2:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 80014c4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80014c8:	625a      	str	r2, [r3, #36]	; 0x24
 80014ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014cc:	4811      	ldr	r0, [pc, #68]	; (8001514 <HAL_UART_MspInit+0x70>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80014ce:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80014d2:	9201      	str	r2, [sp, #4]
 80014d4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d6:	69da      	ldr	r2, [r3, #28]
 80014d8:	f042 0201 	orr.w	r2, r2, #1
 80014dc:	61da      	str	r2, [r3, #28]
 80014de:	69db      	ldr	r3, [r3, #28]
 80014e0:	f003 0301 	and.w	r3, r3, #1
 80014e4:	9302      	str	r3, [sp, #8]
 80014e6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014e8:	230c      	movs	r3, #12
 80014ea:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ec:	2302      	movs	r3, #2
 80014ee:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f0:	2303      	movs	r3, #3
 80014f2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014f4:	2307      	movs	r3, #7
 80014f6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f8:	f7ff f892 	bl	8000620 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80014fc:	2200      	movs	r2, #0
 80014fe:	2026      	movs	r0, #38	; 0x26
 8001500:	4611      	mov	r1, r2
 8001502:	f7ff f80f 	bl	8000524 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001506:	2026      	movs	r0, #38	; 0x26
 8001508:	f7ff f840 	bl	800058c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800150c:	b008      	add	sp, #32
 800150e:	bd10      	pop	{r4, pc}
 8001510:	40004400 	.word	0x40004400
 8001514:	40020000 	.word	0x40020000

08001518 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001518:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800151a:	e003      	b.n	8001524 <LoopCopyDataInit>

0800151c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800151c:	4b0b      	ldr	r3, [pc, #44]	; (800154c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800151e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001520:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001522:	3104      	adds	r1, #4

08001524 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001524:	480a      	ldr	r0, [pc, #40]	; (8001550 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001526:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001528:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800152a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800152c:	d3f6      	bcc.n	800151c <CopyDataInit>
  ldr r2, =_sbss
 800152e:	4a0a      	ldr	r2, [pc, #40]	; (8001558 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001530:	e002      	b.n	8001538 <LoopFillZerobss>

08001532 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001532:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001534:	f842 3b04 	str.w	r3, [r2], #4

08001538 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001538:	4b08      	ldr	r3, [pc, #32]	; (800155c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800153a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800153c:	d3f9      	bcc.n	8001532 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800153e:	f7ff ff6f 	bl	8001420 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001542:	f000 f80f 	bl	8001564 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001546:	f7ff ff0b 	bl	8001360 <main>
  bx lr
 800154a:	4770      	bx	lr
  ldr r3, =_sidata
 800154c:	08001600 	.word	0x08001600
  ldr r0, =_sdata
 8001550:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001554:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8001558:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 800155c:	20000078 	.word	0x20000078

08001560 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001560:	e7fe      	b.n	8001560 <ADC1_IRQHandler>
	...

08001564 <__libc_init_array>:
 8001564:	b570      	push	{r4, r5, r6, lr}
 8001566:	2500      	movs	r5, #0
 8001568:	4e0c      	ldr	r6, [pc, #48]	; (800159c <__libc_init_array+0x38>)
 800156a:	4c0d      	ldr	r4, [pc, #52]	; (80015a0 <__libc_init_array+0x3c>)
 800156c:	1ba4      	subs	r4, r4, r6
 800156e:	10a4      	asrs	r4, r4, #2
 8001570:	42a5      	cmp	r5, r4
 8001572:	d109      	bne.n	8001588 <__libc_init_array+0x24>
 8001574:	f000 f822 	bl	80015bc <_init>
 8001578:	2500      	movs	r5, #0
 800157a:	4e0a      	ldr	r6, [pc, #40]	; (80015a4 <__libc_init_array+0x40>)
 800157c:	4c0a      	ldr	r4, [pc, #40]	; (80015a8 <__libc_init_array+0x44>)
 800157e:	1ba4      	subs	r4, r4, r6
 8001580:	10a4      	asrs	r4, r4, #2
 8001582:	42a5      	cmp	r5, r4
 8001584:	d105      	bne.n	8001592 <__libc_init_array+0x2e>
 8001586:	bd70      	pop	{r4, r5, r6, pc}
 8001588:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800158c:	4798      	blx	r3
 800158e:	3501      	adds	r5, #1
 8001590:	e7ee      	b.n	8001570 <__libc_init_array+0xc>
 8001592:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001596:	4798      	blx	r3
 8001598:	3501      	adds	r5, #1
 800159a:	e7f2      	b.n	8001582 <__libc_init_array+0x1e>
 800159c:	080015f8 	.word	0x080015f8
 80015a0:	080015f8 	.word	0x080015f8
 80015a4:	080015f8 	.word	0x080015f8
 80015a8:	080015fc 	.word	0x080015fc

080015ac <memset>:
 80015ac:	4603      	mov	r3, r0
 80015ae:	4402      	add	r2, r0
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d100      	bne.n	80015b6 <memset+0xa>
 80015b4:	4770      	bx	lr
 80015b6:	f803 1b01 	strb.w	r1, [r3], #1
 80015ba:	e7f9      	b.n	80015b0 <memset+0x4>

080015bc <_init>:
 80015bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015be:	bf00      	nop
 80015c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015c2:	bc08      	pop	{r3}
 80015c4:	469e      	mov	lr, r3
 80015c6:	4770      	bx	lr

080015c8 <_fini>:
 80015c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015ca:	bf00      	nop
 80015cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015ce:	bc08      	pop	{r3}
 80015d0:	469e      	mov	lr, r3
 80015d2:	4770      	bx	lr
